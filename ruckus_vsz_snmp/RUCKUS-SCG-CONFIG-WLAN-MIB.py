# PySNMP SMI module. Autogenerated from smidump -f python RUCKUS-SCG-CONFIG-WLAN-MIB
# by libsmi2pysnmp-0.1.3
# Python version sys.version_info(major=2, minor=7, micro=11, releaselevel='final', serial=0)
# pylint:disable=C0302

mibBuilder = mibBuilder  # pylint:disable=undefined-variable,used-before-assignment

# Imports

(Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
(NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
(ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
(IANAifType, ) = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
(Ipv6Address, ) = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
(ruckusSCGWLANModule, ) = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusSCGWLANModule")
(RuckusAdminStatus, RuckusRadioMode, RuckusRateLimiting, RuckusSSID, RuckusdB, ) = mibBuilder.importSymbols("RUCKUS-TC-MIB", "RuckusAdminStatus", "RuckusRadioMode", "RuckusRateLimiting", "RuckusSSID", "RuckusdB")
(ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup")
(Bits, Counter32, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
(DisplayString, MacAddress, PhysAddress, RowStatus, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "PhysAddress", "RowStatus", "TruthValue")

# Objects

ruckusSCGConfigWLANMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2)).setRevisions(("2015-03-19 11:00", ))
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANMIB.setOrganization("Ruckus Wireless, Inc.")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANMIB.setContactInfo("Ruckus Wireless, Inc.\n\n350 West Java Dr.\nSunnyvale, CA 94089\nUSA\n\nT: +1 (650) 265-4200\nF: +1 (408) 738-2065\nEMail: info@ruckuswireless.com\nWeb: www.ruckuswireless.com")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANMIB.setDescription("Ruckus WLAN mib")
ruckusSCGConfigWLANObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1))
ruckusSCGConfigWLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1))
ruckusSCGConfigWLANTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1))
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANTable.setDescription("SCG WLAN table.")
ruckusSCGConfigWLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1)).setIndexNames((0, "RUCKUS-SCG-CONFIG-WLAN-MIB", "ruckusSCGConfigWLANID"))
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANEntry.setDescription("Specifies each SCG WLAN configuration entry.")
ruckusSCGConfigWLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANID.setDescription("this Wireless LAN(WLAN) ID ")
ruckusSCGConfigWLANSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANSSID.setDescription("SSID for this Wireless LAN.")
ruckusSCGConfigWLANDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANDescription.setDescription("Description for this Wireless LAN.")
ruckusSCGConfigWLANName = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANName.setDescription("Name for this Wireless LAN")
ruckusSCGZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGZoneName.setDescription("Zone name for this wlan")
ruckusSCGConfigWLANWLANServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 8), Integer().subtype(subtypeSpec=SingleValueConstraint(5, 3, 2, 4, 6, 1, )).subtype(namedValues=NamedValues(("standardUsage", 1), ("hotspot", 2), ("guest", 3), ("webauth", 4), ("hotspot20", 5), ("hotspot20-osen", 6), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANWLANServiceType.setDescription("The the Service type for the Wireless LAN.")
ruckusSCGConfigWLANAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 10), Integer().subtype(subtypeSpec=SingleValueConstraint(2, 1, 3, )).subtype(namedValues=NamedValues(("open", 1), ("eap", 2), ("mac-address", 3), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANAuthentication.setDescription("Authentication method choosen for this Wireless LAN.")
ruckusSCGConfigWLANEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 12), Integer().subtype(subtypeSpec=SingleValueConstraint(2, 1, 3, 5, 4, )).subtype(namedValues=NamedValues(("wpa2", 1), ("wpa-Mixed", 2), ("wep-64", 3), ("wep-128", 4), ("none-enc", 5), )).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANEncryption.setDescription("Encryption method choosen for this Wireless LAN.")
ruckusSCGConfigWLANWEPKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANWEPKeyIndex.setDescription("Select the WEP key index for the WEP encryption.\nfor 802.1x wlan(eap), this node should not be set.")
ruckusSCGConfigWLANWEPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 16), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(10, 10), ValueSizeConstraint(26, 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANWEPKey.setDescription("Enter the Pass-phrase for the WEP encryption method.\nOnly 10 or 26 Hex character.such as: 1122334455.\nfor 802.1x wlan(eap), this node should not be set.")
ruckusSCGConfigWLANWPACipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 20), Integer().subtype(subtypeSpec=SingleValueConstraint(1, 3, 2, )).subtype(namedValues=NamedValues(("aes", 1), ("tkipaes", 2), ("null", 3), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANWPACipherType.setDescription("Enter the encryption cipher method for the WPA encryption.\nfpr WPA2,aes is only supported.null is only for read.")
ruckusSCGConfigWLANWPAKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANWPAKey.setDescription("Enter the Pass-phrase for the WPA encryption.\nSpecifies the WPA PSK (Wi-Fi Protected Access\nPre Shared key)\nIf the key length is 64 then all 64 characters should be in hex,\notherwise the key assumed to be ascii.\nfor 802.1x wlan(eap), this node should not be set.")
ruckusSCGConfigWLANWirelessClientIsolation = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 28), Integer().subtype(subtypeSpec=SingleValueConstraint(1, 2, )).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANWirelessClientIsolation.setDescription("set Wireless Client Isolation, clients will be unable to communicate with each other, or access any of the restricted subnet.\nfor Guest and webauth WLAN type, it must be 'enable'.")
ruckusSCGConfigWLANZeroITActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 30), Integer().subtype(subtypeSpec=SingleValueConstraint(1, 2, )).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANZeroITActivation.setDescription("Enable the Zero IT Activation Service of the Wireless LAN or not.")
ruckusSCGConfigWLANServicePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 32), Integer().subtype(subtypeSpec=SingleValueConstraint(1, 2, )).subtype(namedValues=NamedValues(("high", 1), ("low", 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANServicePriority.setDescription("Select the QOS service priority for the Wireless LAN.")
ruckusSCGConfigWLANAccountingUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANAccountingUpdateInterval.setDescription("Enter interval in minutes to update Accounting Server.")
ruckusSCGConfigWLANVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANVlanID.setDescription("Specifies the VLAN ID of the WLAN.  If VLAN ID is 1, packets from this WLAN will be untagged.")
ruckusSCGConfigWLANHideSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 50), Integer().subtype(subtypeSpec=SingleValueConstraint(1, 2, )).subtype(namedValues=NamedValues(("enable", 1), ("disable", 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANHideSSID.setDescription("Hide SSID, not to broadcast it SSID.")
ruckusSCGConfigWLANMaxClientsPerAP = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 2, 1, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts:
	ruckusSCGConfigWLANMaxClientsPerAP.setDescription("Select the Number of client devices the AP can service for the Wireless LAN.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("RUCKUS-SCG-CONFIG-WLAN-MIB", PYSNMP_MODULE_ID=ruckusSCGConfigWLANMIB)
# Objects
mibBuilder.exportSymbols("RUCKUS-SCG-CONFIG-WLAN-MIB", ruckusSCGConfigWLANMIB=ruckusSCGConfigWLANMIB, ruckusSCGConfigWLANObjects=ruckusSCGConfigWLANObjects, ruckusSCGConfigWLAN=ruckusSCGConfigWLAN, ruckusSCGConfigWLANTable=ruckusSCGConfigWLANTable, ruckusSCGConfigWLANEntry=ruckusSCGConfigWLANEntry, ruckusSCGConfigWLANID=ruckusSCGConfigWLANID, ruckusSCGConfigWLANSSID=ruckusSCGConfigWLANSSID, ruckusSCGConfigWLANDescription=ruckusSCGConfigWLANDescription, ruckusSCGConfigWLANName=ruckusSCGConfigWLANName, ruckusSCGZoneName=ruckusSCGZoneName, ruckusSCGConfigWLANWLANServiceType=ruckusSCGConfigWLANWLANServiceType, ruckusSCGConfigWLANAuthentication=ruckusSCGConfigWLANAuthentication, ruckusSCGConfigWLANEncryption=ruckusSCGConfigWLANEncryption, ruckusSCGConfigWLANWEPKeyIndex=ruckusSCGConfigWLANWEPKeyIndex, ruckusSCGConfigWLANWEPKey=ruckusSCGConfigWLANWEPKey, ruckusSCGConfigWLANWPACipherType=ruckusSCGConfigWLANWPACipherType, ruckusSCGConfigWLANWPAKey=ruckusSCGConfigWLANWPAKey, ruckusSCGConfigWLANWirelessClientIsolation=ruckusSCGConfigWLANWirelessClientIsolation, ruckusSCGConfigWLANZeroITActivation=ruckusSCGConfigWLANZeroITActivation, ruckusSCGConfigWLANServicePriority=ruckusSCGConfigWLANServicePriority, ruckusSCGConfigWLANAccountingUpdateInterval=ruckusSCGConfigWLANAccountingUpdateInterval, ruckusSCGConfigWLANVlanID=ruckusSCGConfigWLANVlanID, ruckusSCGConfigWLANHideSSID=ruckusSCGConfigWLANHideSSID, ruckusSCGConfigWLANMaxClientsPerAP=ruckusSCGConfigWLANMaxClientsPerAP)
