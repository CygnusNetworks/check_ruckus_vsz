# PySNMP SMI module. Autogenerated from smidump -f python RUCKUS-SCG-WLAN-MIB
# by libsmi2pysnmp-0.1.3 at Tue Jun  7 14:58:46 2016,
# Python version sys.version_info(major=2, minor=7, micro=11, releaselevel='final', serial=0)
# pylint:disable=C0302

mibBuilder = mibBuilder  # pylint:disable=undefined-variable

# Imports

(Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
(NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
(ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
(IANAifType, ) = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
(Ipv6Address, ) = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
(ruckusSCGWLANModule, ) = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusSCGWLANModule")
(RuckusAdminStatus, RuckusRadioMode, RuckusRateLimiting, RuckusSSID, RuckusdB, ) = mibBuilder.importSymbols("RUCKUS-TC-MIB", "RuckusAdminStatus", "RuckusRadioMode", "RuckusRateLimiting", "RuckusSSID", "RuckusdB")
(ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup")
(Bits, Counter32, Counter64, Integer32, Integer32, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "Integer32", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
(DisplayString, MacAddress, PhysAddress, RowStatus, TruthValue, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "PhysAddress", "RowStatus", "TruthValue")

# Objects

ruckusWLANMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1)).setRevisions(("2014-05-19 11:00", ))
if mibBuilder.loadTexts:
	ruckusWLANMIB.setOrganization("Ruckus Wireless, Inc.")
if mibBuilder.loadTexts:
	ruckusWLANMIB.setContactInfo("Ruckus Wireless, Inc.\n\n350 West Java Dr.\nSunnyvale, CA 94089\nUSA\n\nT: +1 (650) 265-4200\nF: +1 (408) 738-2065\nEMail: info@ruckuswireless.com\nWeb: www.ruckuswireless.com")
if mibBuilder.loadTexts:
	ruckusWLANMIB.setDescription("Ruckus WLAN mib")
ruckusWLANObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1))
ruckusWLANInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1))
ruckusWLANTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 1))
if mibBuilder.loadTexts:
	ruckusWLANTable.setDescription("WLAN table.")
ruckusWLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 1, 1)).setIndexNames((0, "RUCKUS-SCG-WLAN-MIB", "ruckusWLANIndex"))
if mibBuilder.loadTexts:
	ruckusWLANEntry.setDescription("Specifies each WLAN entry.")
ruckusWLANSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 1, 1, 1), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANSSID.setDescription("SSID.")
ruckusWLANNumSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANNumSta.setDescription("Number of client devices.")
ruckusWLANRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANRxBytes.setDescription("Received bytes.")
ruckusWLANTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANTxBytes.setDescription("Transmitted bytes.")
ruckusWLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 1, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANIndex.setDescription("A unique value for each WLAN.")
ruckusSCGWLANTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2))
if mibBuilder.loadTexts:
	ruckusSCGWLANTable.setDescription("SCG WLAN table.")
ruckusSCGWLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2, 1)).setIndexNames((0, "RUCKUS-SCG-WLAN-MIB", "ruckusSCGWLANIndex"))
if mibBuilder.loadTexts:
	ruckusSCGWLANEntry.setDescription("Specifies each SCG WLAN entry.")
ruckusSCGWLANSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2, 1, 1), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANSSID.setDescription("SSID.")
ruckusSCGWLANZone = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANZone.setDescription("Zone name.")
ruckusSCGWLANDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANDomain.setDescription("Domain name.")
ruckusSCGWLANNumSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANNumSta.setDescription("Number of client devices.")
ruckusSCGWLANRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANRxBytes.setDescription("Received bytes.")
ruckusSCGWLANTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANTxBytes.setDescription("Transmitted bytes.")
ruckusSCGWLANAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAuthType.setDescription("Authentication Type.")
ruckusSCGWLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 1, 2, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANIndex.setDescription("A unique value for each WLAN.")
ruckusWLANAPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2))
ruckusWLANAPTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 1))
if mibBuilder.loadTexts:
	ruckusWLANAPTable.setDescription("WLAN AP table.")
ruckusWLANAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 1, 1)).setIndexNames((0, "RUCKUS-SCG-WLAN-MIB", "ruckusWLANAPMacAddr"))
if mibBuilder.loadTexts:
	ruckusWLANAPEntry.setDescription("Specifies each WLAN AP entry.")
ruckusWLANAPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANAPMacAddr.setDescription("MAC address.")
ruckusWLANAPUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANAPUptime.setDescription("Up time.")
ruckusWLANAPSWversion = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANAPSWversion.setDescription("Software version.")
ruckusWLANAPIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANAPIPAddr.setDescription("IP address.")
ruckusWLANAPNumSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusWLANAPNumSta.setDescription("Total number of authenticated terminal which is using currently on this AP.")
ruckusSCGAPTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2))
if mibBuilder.loadTexts:
	ruckusSCGAPTable.setDescription("SCG AP table.")
ruckusSCGAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1)).setIndexNames((0, "RUCKUS-SCG-WLAN-MIB", "ruckusSCGAPMac"))
if mibBuilder.loadTexts:
	ruckusSCGAPEntry.setDescription("Specifies each AP entry.")
ruckusSCGAPMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPMac.setDescription("MAC address.")
ruckusSCGAPGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPGroup.setDescription("AP Group.")
ruckusSCGAPZone = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPZone.setDescription("Zone of this AP.")
ruckusSCGAPDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPDomain.setDescription("Domain of this AP.")
ruckusSCGAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPName.setDescription("Name of this AP.")
ruckusSCGAPUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPUptime.setDescription("Up time.")
ruckusSCGAPFWversion = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPFWversion.setDescription("Firmware version.")
ruckusSCGAPModel = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPModel.setDescription("Model of this AP.")
ruckusSCGAPSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPSerial.setDescription("Serial of this AP.")
ruckusSCGAPIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIp.setDescription("IP address.")
ruckusSCGAPIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIPType.setDescription("IP address type.")
ruckusSCGAPExtIp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPExtIp.setDescription("External IP address.")
ruckusSCGAPExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPExtPort.setDescription("External Port.")
ruckusSCGAPNumSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPNumSta.setDescription("Total number of authenticated terminal which is using currently on this AP.")
ruckusSCGAPConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPConnStatus.setDescription("Connection Status of this AP.")
ruckusSCGAPRegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPRegStatus.setDescription("Registration Status of this AP.")
ruckusSCGAPConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPConfigStatus.setDescription("Configuration Status of this AP.")
ruckusSCGAPLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPLocation.setDescription("Location of this AP.")
ruckusSCGAPGPSInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPGPSInfo.setDescription("GPS Information of this AP.")
ruckusSCGAPMeshRole = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPMeshRole.setDescription("Mesh Role of this AP.")
ruckusSCGAPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPDescription.setDescription("Description of this AP.")
ruckusSCGAPRXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPRXBytes.setDescription("Received bytes.")
ruckusSCGAPTXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPTXBytes.setDescription("Transmitted bytes.")
ruckusSCGAPIpsecSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIpsecSessionTime.setDescription("ipsec session time lasting, unit: seconds.")
ruckusSCGAPIpsecTXPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIpsecTXPkts.setDescription("ipsec transmitted packet counts.")
ruckusSCGAPIpsecRXPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIpsecRXPkts.setDescription("ipsec received packet counts.")
ruckusSCGAPIpsecTXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIpsecTXBytes.setDescription("ipsec transmitted byte counts.")
ruckusSCGAPIpsecRXBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIpsecRXBytes.setDescription("ipsec received byte counts.")
ruckusSCGAPIpsecTXPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIpsecTXPktsDropped.setDescription("ipsec transmitted dropped packet counts.")
ruckusSCGAPIpsecRXPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIpsecRXPktsDropped.setDescription("ipsec received dropped packet counts.")
ruckusSCGAPIpsecTXIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIpsecTXIdleTime.setDescription("In seconds since last seen transmitted packet.")
ruckusSCGAPIpsecRXIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIpsecRXIdleTime.setDescription("In seconds since last seen received packet.")
ruckusSCGAPIPV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 2, 1, 150), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGAPIPV6Addr.setDescription("IPv6 address.")
ruckusSCGWLANAPSoftGREStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3))
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGREStatsTable.setDescription("SCG WLAN AP SoftGRE Stats table.")
ruckusSCGWLANAPSoftGREStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1)).setIndexNames((0, "RUCKUS-SCG-WLAN-MIB", "ruckusSCGWLANAPSoftGREMacAddr"), (0, "RUCKUS-SCG-WLAN-MIB", "ruckusSCGWLANAPSoftGREIndex"))
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGREStatsEntry.setDescription("Specifies each SCG WLAN AP SoftGRE Stats entry.")
ruckusSCGWLANAPSoftGREMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGREMacAddr.setDescription("AP MAC address.")
ruckusSCGWLANAPSoftGREIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGREIndex.setDescription("Index of GRE server")
ruckusSCGWLANAPSoftGREGWAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGREGWAddr.setDescription("IP/FQDN of the server")
ruckusSCGWLANAPSoftGREActive = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGREActive.setDescription("Active or inactive")
ruckusSCGWLANAPSoftGRETxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGRETxPkts.setDescription("Transmitted packets.")
ruckusSCGWLANAPSoftGRETxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGRETxBytes.setDescription("Transmitted bytes.")
ruckusSCGWLANAPSoftGRERxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGRERxPkts.setDescription("Received packets.")
ruckusSCGWLANAPSoftGRERxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGRERxBytes.setDescription("Received bytes.")
ruckusSCGWLANAPSoftGRETxPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGRETxPktsErr.setDescription("Transmitted error packet")
ruckusSCGWLANAPSoftGRERxPktsErr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGRERxPktsErr.setDescription("Received error packet")
ruckusSCGWLANAPSoftGRETxPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGRETxPktsDropped.setDescription("Transmitted dropped packet")
ruckusSCGWLANAPSoftGRERxPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGRERxPktsDropped.setDescription("Received dropped packet")
ruckusSCGWLANAPSoftGRETxPktsFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGRETxPktsFrag.setDescription("Counter of oversize TX packets")
ruckusSCGWLANAPSoftGREICMPTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGREICMPTotal.setDescription("Counter of ICMP keep-alive request messages")
ruckusSCGWLANAPSoftGREICMPNoReply = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGREICMPNoReply.setDescription("Counter of non-reply ICMP keep-alive request messages")
ruckusSCGWLANAPSoftGREDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 3, 2, 1, 1, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts:
	ruckusSCGWLANAPSoftGREDisconnect.setDescription("Counter of disconnected")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("RUCKUS-SCG-WLAN-MIB", PYSNMP_MODULE_ID=ruckusWLANMIB)
# Objects
mibBuilder.exportSymbols("RUCKUS-SCG-WLAN-MIB", ruckusWLANMIB=ruckusWLANMIB, ruckusWLANObjects=ruckusWLANObjects, ruckusWLANInfo=ruckusWLANInfo, ruckusWLANTable=ruckusWLANTable, ruckusWLANEntry=ruckusWLANEntry, ruckusWLANSSID=ruckusWLANSSID, ruckusWLANNumSta=ruckusWLANNumSta, ruckusWLANRxBytes=ruckusWLANRxBytes, ruckusWLANTxBytes=ruckusWLANTxBytes, ruckusWLANIndex=ruckusWLANIndex, ruckusSCGWLANTable=ruckusSCGWLANTable, ruckusSCGWLANEntry=ruckusSCGWLANEntry, ruckusSCGWLANSSID=ruckusSCGWLANSSID, ruckusSCGWLANZone=ruckusSCGWLANZone, ruckusSCGWLANDomain=ruckusSCGWLANDomain, ruckusSCGWLANNumSta=ruckusSCGWLANNumSta, ruckusSCGWLANRxBytes=ruckusSCGWLANRxBytes, ruckusSCGWLANTxBytes=ruckusSCGWLANTxBytes, ruckusSCGWLANAuthType=ruckusSCGWLANAuthType, ruckusSCGWLANIndex=ruckusSCGWLANIndex, ruckusWLANAPInfo=ruckusWLANAPInfo, ruckusWLANAPTable=ruckusWLANAPTable, ruckusWLANAPEntry=ruckusWLANAPEntry, ruckusWLANAPMacAddr=ruckusWLANAPMacAddr, ruckusWLANAPUptime=ruckusWLANAPUptime, ruckusWLANAPSWversion=ruckusWLANAPSWversion, ruckusWLANAPIPAddr=ruckusWLANAPIPAddr, ruckusWLANAPNumSta=ruckusWLANAPNumSta, ruckusSCGAPTable=ruckusSCGAPTable, ruckusSCGAPEntry=ruckusSCGAPEntry, ruckusSCGAPMac=ruckusSCGAPMac, ruckusSCGAPGroup=ruckusSCGAPGroup, ruckusSCGAPZone=ruckusSCGAPZone, ruckusSCGAPDomain=ruckusSCGAPDomain, ruckusSCGAPName=ruckusSCGAPName, ruckusSCGAPUptime=ruckusSCGAPUptime, ruckusSCGAPFWversion=ruckusSCGAPFWversion, ruckusSCGAPModel=ruckusSCGAPModel, ruckusSCGAPSerial=ruckusSCGAPSerial, ruckusSCGAPIp=ruckusSCGAPIp, ruckusSCGAPIPType=ruckusSCGAPIPType, ruckusSCGAPExtIp=ruckusSCGAPExtIp, ruckusSCGAPExtPort=ruckusSCGAPExtPort, ruckusSCGAPNumSta=ruckusSCGAPNumSta, ruckusSCGAPConnStatus=ruckusSCGAPConnStatus, ruckusSCGAPRegStatus=ruckusSCGAPRegStatus, ruckusSCGAPConfigStatus=ruckusSCGAPConfigStatus, ruckusSCGAPLocation=ruckusSCGAPLocation, ruckusSCGAPGPSInfo=ruckusSCGAPGPSInfo, ruckusSCGAPMeshRole=ruckusSCGAPMeshRole, ruckusSCGAPDescription=ruckusSCGAPDescription, ruckusSCGAPRXBytes=ruckusSCGAPRXBytes, ruckusSCGAPTXBytes=ruckusSCGAPTXBytes, ruckusSCGAPIpsecSessionTime=ruckusSCGAPIpsecSessionTime, ruckusSCGAPIpsecTXPkts=ruckusSCGAPIpsecTXPkts, ruckusSCGAPIpsecRXPkts=ruckusSCGAPIpsecRXPkts, ruckusSCGAPIpsecTXBytes=ruckusSCGAPIpsecTXBytes, ruckusSCGAPIpsecRXBytes=ruckusSCGAPIpsecRXBytes, ruckusSCGAPIpsecTXPktsDropped=ruckusSCGAPIpsecTXPktsDropped, ruckusSCGAPIpsecRXPktsDropped=ruckusSCGAPIpsecRXPktsDropped, ruckusSCGAPIpsecTXIdleTime=ruckusSCGAPIpsecTXIdleTime, ruckusSCGAPIpsecRXIdleTime=ruckusSCGAPIpsecRXIdleTime, ruckusSCGAPIPV6Addr=ruckusSCGAPIPV6Addr, ruckusSCGWLANAPSoftGREStatsTable=ruckusSCGWLANAPSoftGREStatsTable, ruckusSCGWLANAPSoftGREStatsEntry=ruckusSCGWLANAPSoftGREStatsEntry, ruckusSCGWLANAPSoftGREMacAddr=ruckusSCGWLANAPSoftGREMacAddr, ruckusSCGWLANAPSoftGREIndex=ruckusSCGWLANAPSoftGREIndex, ruckusSCGWLANAPSoftGREGWAddr=ruckusSCGWLANAPSoftGREGWAddr, ruckusSCGWLANAPSoftGREActive=ruckusSCGWLANAPSoftGREActive, ruckusSCGWLANAPSoftGRETxPkts=ruckusSCGWLANAPSoftGRETxPkts, ruckusSCGWLANAPSoftGRETxBytes=ruckusSCGWLANAPSoftGRETxBytes, ruckusSCGWLANAPSoftGRERxPkts=ruckusSCGWLANAPSoftGRERxPkts, ruckusSCGWLANAPSoftGRERxBytes=ruckusSCGWLANAPSoftGRERxBytes, ruckusSCGWLANAPSoftGRETxPktsErr=ruckusSCGWLANAPSoftGRETxPktsErr, ruckusSCGWLANAPSoftGRERxPktsErr=ruckusSCGWLANAPSoftGRERxPktsErr, ruckusSCGWLANAPSoftGRETxPktsDropped=ruckusSCGWLANAPSoftGRETxPktsDropped, ruckusSCGWLANAPSoftGRERxPktsDropped=ruckusSCGWLANAPSoftGRERxPktsDropped, ruckusSCGWLANAPSoftGRETxPktsFrag=ruckusSCGWLANAPSoftGRETxPktsFrag, ruckusSCGWLANAPSoftGREICMPTotal=ruckusSCGWLANAPSoftGREICMPTotal, ruckusSCGWLANAPSoftGREICMPNoReply=ruckusSCGWLANAPSoftGREICMPNoReply, ruckusSCGWLANAPSoftGREDisconnect=ruckusSCGWLANAPSoftGREDisconnect)
