# PySNMP SMI module. Autogenerated from smidump -f python RUCKUS-SCG-EVENT-MIB
# by libsmi2pysnmp-0.1.3 at Tue Jun  7 14:58:46 2016,
# Python version sys.version_info(major=2, minor=7, micro=11, releaselevel='final', serial=0)
# pylint:disable=C0302

mibBuilder = mibBuilder  # pylint:disable=undefined-variable

# Imports

(Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
(NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
(ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
(ruckusEvents, ) = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusEvents")
(ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup")
(Bits, Integer32, IpAddress, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "IpAddress", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "enterprises")
(DisplayString, MacAddress, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress")

# Objects

ruckusSCGEventMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 2, 10)).setRevisions(("2015-08-18 10:00", ))
if mibBuilder.loadTexts:
	ruckusSCGEventMIB.setOrganization("Ruckus Wireless, Inc.")
if mibBuilder.loadTexts:
	ruckusSCGEventMIB.setContactInfo("Ruckus Wireless, Inc.\n\n350 West Java Dr.\nSunnyvale, CA 94089\nUSA\n\nT: +1 (650) 265-4200\nF: +1 (408) 738-2065\nEMail: info@ruckuswireless.com\nWeb: www.ruckuswireless.com")
if mibBuilder.loadTexts:
	ruckusSCGEventMIB.setDescription("Ruckus SCG event objects, including trap OID and trap payload.")
ruckusSCGEventTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1))
ruckusSCGEventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2))
ruckusSCGEventDescription = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 1), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventDescription.setDescription("The event's description.")
ruckusSCGClusterName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 2), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGClusterName.setDescription("The SCG's cluster name.")
ruckusSCGEventCode = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 10), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventCode.setDescription("The event's code.")
ruckusSCGProcessName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 11), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGProcessName.setDescription("The process name.")
ruckusSCGEventCtrlIP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 12), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventCtrlIP.setDescription("The SCG's node control IP address.")
ruckusSCGEventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 13), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventSeverity.setDescription("The event's severity.")
ruckusSCGEventType = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 14), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventType.setDescription("The event's type.")
ruckusSCGEventNodeMgmtIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 15), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventNodeMgmtIp.setDescription("The SCG's management IP address.")
ruckusSCGEventNodeName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 16), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventNodeName.setDescription("The SCG's node name.")
ruckusSCGCPUPerc = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 17), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGCPUPerc.setDescription("The SCG's CPU usage percent.")
ruckusSCGMemoryPerc = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 18), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGMemoryPerc.setDescription("The SCG's memory usage percent.")
ruckusSCGDiskPerc = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 19), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDiskPerc.setDescription("The SCG's disk usage percent.")
ruckusSCGEventMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 20), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventMacAddr.setDescription("The SCG's MAC address.")
ruckusSCGEventFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 21), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventFirmwareVersion.setDescription("The SCG's firmware version.")
ruckusSCGEventUpgradedFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 22), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventUpgradedFirmwareVersion.setDescription("The SCG's upgrade firmware version.")
ruckusSCGEventAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 23), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventAPMacAddr.setDescription("The AP's MAC address.")
ruckusSCGEventReason = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 24), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventReason.setDescription("The event's reason.")
ruckusSCGEventAPName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 25), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventAPName.setDescription("The AP's name.")
ruckusSCGEventAPIP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 26), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventAPIP.setDescription("The AP's IP address.")
ruckusSCGEventAPLocation = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 27), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventAPLocation.setDescription("The AP's location.")
ruckusSCGEventAPGPSCoordinates = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 28), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventAPGPSCoordinates.setDescription("The AP's GPS coordinates.")
ruckusSCGEventAPDescription = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 29), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventAPDescription.setDescription("The AP's description.")
ruckusSCGEventZoneName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 30), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventZoneName.setDescription("The zone name.")
ruckusSCGAPModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 31), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGAPModel.setDescription("The AP model")
ruckusSCGConfigAPModel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 32), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGConfigAPModel.setDescription("The configured AP model")
ruckusSCGAPConfigID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 33), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGAPConfigID.setDescription("The AP's configuration UUID")
ruckusSCGEventTargetZoneName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 34), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventTargetZoneName.setDescription("The AP's target zone name")
ruckusSCGEventAPIPv6 = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 35), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventAPIPv6.setDescription("The AP's IPv6 address.")
ruckusSCGLBSURL = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 38), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGLBSURL.setDescription("The LBS server's URL")
ruckusSCGLBSPort = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 39), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGLBSPort.setDescription("The LBS server's port")
ruckusSCGEventSSID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 40), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventSSID.setDescription("The WLAN ssid")
ruckusSCGEventRogueMac = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 45), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventRogueMac.setDescription("The rogue MAC Address")
ruckusPrimaryGRE = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 46), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusPrimaryGRE.setDescription("The primary GRE gateway.")
ruckusSecondaryGRE = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 47), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSecondaryGRE.setDescription("The secondary GRE gateway.")
ruckusSoftGREGatewayList = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 48), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSoftGREGatewayList.setDescription("The softGRE gateway list. It could be IP address or FQDN and must have only two IPs/DNs separated by semicolon (;).")
ruckusSCGSoftGREGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 49), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGSoftGREGWAddress.setDescription("The softGRE gateway IP address.")
ruckusSCGEventClientMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 50), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGEventClientMacAddr.setDescription("The client's MAC address.")
ruckusSCGDPKey = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 80), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDPKey.setDescription("The DP's identifier.")
ruckusSCGDPConfigID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 81), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDPConfigID.setDescription("The DP's configuration ID.")
ruckusSCGDPIP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 82), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDPIP.setDescription("The DP's IP address.")
ruckusSCGDPPacketPoolID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 83), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDPPacketPoolID.setDescription("The DP's packet pool ID.")
ruckusSCGNetworkPortID = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 100), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGNetworkPortID.setDescription("The network port ID.")
ruckusSCGNetworkInterface = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 101), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGNetworkInterface.setDescription("The network interface.")
ruckusSCGSwitchStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 102), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGSwitchStatus.setDescription("The switch status.")
ruckusSCGTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 120), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGTemperatureStatus.setDescription("The temperature status.")
ruckusSCGProcessorId = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 121), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGProcessorId.setDescription("The processor ID.")
ruckusSCGFanId = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 122), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGFanId.setDescription("The fan module ID.")
ruckusSCGFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 123), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGFanStatus.setDescription("The fan module status.")
ruckusSCGPsId = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 124), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGPsId.setDescription("The power supply ID.")
ruckusSCGPsStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 125), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGPsStatus.setDescription("The power supply status.")
ruckusSCGDrvId = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 126), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDrvId.setDescription("The drive ID.")
ruckusSCGDrvStatus = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 127), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDrvStatus.setDescription("The drive status.")
ruckusSCGLicenseType = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 150), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGLicenseType.setDescription("The license type")
ruckusSCGLicenseUsagePerc = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 151), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGLicenseUsagePerc.setDescription("The license usage percent.")
ruckusSCGLicenseServerName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 152), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGLicenseServerName.setDescription("The license server name.")
ruckusSCGIPSecGWAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 153), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGIPSecGWAddress.setDescription("The secure gateway address.")
ruckusSCGSyslogServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 154), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGSyslogServerAddress.setDescription("The syslog server address.")
ruckusSCGSrcSyslogServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 155), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGSrcSyslogServerAddress.setDescription("The source syslog server address.")
ruckusSCGDestSyslogServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 156), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDestSyslogServerAddress.setDescription("The destination syslog server address.")
ruckusSCGFtpIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 200), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGFtpIp.setDescription("The FTP server IP address.")
ruckusSCGFtpPort = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 201), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGFtpPort.setDescription("The FTP server port.")
ruckusSCGSrcProcess = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 301), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGSrcProcess.setDescription("The source process name.")
ruckusSCGGgsnIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 302), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGGgsnIp.setDescription("The GGSN IP address.")
ruckusSCGGtpcIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 303), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGGtpcIp.setDescription("The GTP IP address.")
ruckusSCGApn = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 304), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGApn.setDescription("The APN name.")
ruckusSCGUEImsi = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 305), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGUEImsi.setDescription("The UE IMSI.")
ruckusSCGUEMsisdn = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 306), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGUEMsisdn.setDescription("The UE MSISDN.")
ruckusSCGAuthSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 307), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGAuthSrvrIp.setDescription("The authentication server IP address.")
ruckusSCGRadProxyIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 308), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGRadProxyIp.setDescription("The radius proxy IP address.")
ruckusSCGAccSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 309), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGAccSrvrIp.setDescription("The accounting server IP address.")
ruckusSCGRealm = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 310), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGRealm.setDescription("The Realm name.")
ruckusSCGCgfSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 311), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGCgfSrvrIp.setDescription("The CGF IP address.")
ruckusSCGRadSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 312), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGRadSrvrIp.setDescription("The radius server IP address.")
ruckusSCGCipIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 313), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGCipIp.setDescription("The CIP IP address.")
ruckusSCGPointCode = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 314), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGPointCode.setDescription("The point code.")
ruckusSCGCongLevel = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 315), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGCongLevel.setDescription("The level of congestion.")
ruckusSCGSSN = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 316), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGSSN.setDescription("The SSN.")
ruckusSCGRoutingContext = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 317), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGRoutingContext.setDescription("The routing context.")
ruckusSCGSrcIP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 318), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGSrcIP.setDescription("The source IP address.")
ruckusSCGSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 319), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGSrcPort.setDescription("The source port.")
ruckusSCGDestIP = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 320), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDestIP.setDescription("The destination IP address.")
ruckusSCGDestPort = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 321), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDestPort.setDescription("The destination port.")
ruckusSCGOperation = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 322), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGOperation.setDescription("The operation name.")
ruckusSCGHlrInstance = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 323), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGHlrInstance.setDescription("The HLR instance.")
ruckusSCGUserName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 324), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGUserName.setDescription("The user name.")
ruckusSCGPgwIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 325), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGPgwIp.setDescription("The PGW IP address.")
ruckusSCGFileName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 326), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGFileName.setDescription("The file name.")
ruckusSCGLDAPSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 327), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGLDAPSrvrIp.setDescription("The LDAP server IP address.")
ruckusSCGADSrvrIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 328), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGADSrvrIp.setDescription("The AD server IP address.")
ruckusSCGSoftwareName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 329), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGSoftwareName.setDescription("The software name.")
ruckusSCGDomainName = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 330), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDomainName.setDescription("The domain name.")
ruckusSCGDNATIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 331), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGDNATIp.setDescription("The DNAT server IP address.")
ruckusSCGLMAIp = MibScalar((1, 3, 6, 1, 4, 1, 25053, 2, 10, 2, 400), OctetString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts:
	ruckusSCGLMAIp.setDescription("The LMA IP address.")

# Augmentions

# Notifications

ruckusSCGSystemMiscEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 1)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGSystemMiscEventTrap.setDescription("Generic trap triggered by admin specified miscellaneous event. \nThe event severity, event type, event description and event code are enclosed.")
ruckusSCGUpgradeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 2)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventFirmwareVersion"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventUpgradedFirmwareVersion"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGUpgradeSuccessTrap.setDescription("Trigger when there is a SCG upgrade success event.\nThe event severity, event type, node name, MAC address, management IP address, firmware version, upgraded firmware version and event code are enclosed.")
ruckusSCGUpgradeFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 3)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventFirmwareVersion"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventUpgradedFirmwareVersion"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGUpgradeFailedTrap.setDescription("Trigger when there is a SCG upgrade failed event.\nThe event severity, event type, firmware version, upgraded firmware version and event code are enclosed.")
ruckusSCGNodeRestartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 4)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeRestartedTrap.setDescription("Trigger when there is a SCG restarted event.\nThe event severity, event type, node name, MAC address, management IP address, restart reason and event code are enclosed.")
ruckusSCGNodeShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 5)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeShutdownTrap.setDescription("Trigger when there is a SCG shutdown event.\nThe event severity, event type, node name, MAC address, management IP address and event code are enclosed.")
ruckusSCGCPUUsageThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 6)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGCPUPerc"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGCPUUsageThresholdExceededTrap.setDescription("Trigger when there is a SCG CPU threshold exceeded event.\nThe event severity, event type, node name, MAC address, CPU usage percent and event code are enclosed.")
ruckusSCGMemoryUsageThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 7)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGMemoryPerc"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGMemoryUsageThresholdExceededTrap.setDescription("Trigger when there is a SCG memory threshold exceeded event.\nThe event severity, event type, node name, MAC address, memory usage percent and event code are enclosed.")
ruckusSCGDiskUsageThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 8)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDiskPerc"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGDiskUsageThresholdExceededTrap.setDescription("Trigger when there is a SCG disk usage threshold exceeded event.\nThe event severity, event type, node name, MAC address, disk usage percent and event code are enclosed.")
ruckusSCGLicenseUsageThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 19)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLicenseUsagePerc"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLicenseType"), ))
if mibBuilder.loadTexts:
	ruckusSCGLicenseUsageThresholdExceededTrap.setDescription("Trigger when there is SCG license usage threshold exceeded event.\nThe event severity, event type, license type, license usage percent and event code are enclosed.")
ruckusSCGAPMiscEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 20)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPMiscEventTrap.setDescription("Generic trap triggered by AP related miscellaneous event. \nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP GPS coordinates, event description, AP description, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPConnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 21)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPConnectedTrap.setDescription("Trigger when there is an AP connected event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, join reason, event code and AP IPv6 address are enclosed.")
ruckusSCGAPDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 22)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPDeletedTrap.setDescription("Trigger when there is an AP deleted event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPDisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 23)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPDisconnectedTrap.setDescription("Trigger when there is an AP connection lost event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPLostHeartbeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 24)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPLostHeartbeatTrap.setDescription("Trigger when there is a SCG lost AP heart beat event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 25)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPRebootTrap.setDescription("Trigger when there is an AP reboot event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, reboot reason, event code and AP IPv6 address are enclosed.")
ruckusSCGCriticalAPConnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 26)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGCriticalAPConnectedTrap.setDescription("Trigger when there is a critical AP connected event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, join reason, event code and AP IPv6 address are enclosed.")
ruckusSCGCriticalAPDisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 27)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGCriticalAPDisconnectedTrap.setDescription("Trigger when there is a critical AP connection lost event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPRejectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 28)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPRejectedTrap.setDescription("Trigger when there is an AP rejected event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, SCG control IP address, reject reason, event code and AP IPv6 address are enclosed.")
ruckusSCGAPConfUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 29)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGAPConfigID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPConfUpdateFailedTrap.setDescription("Trigger when there is an AP configuration update failed event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, configure ID, event code and AP IPv6 address are enclosed.")
ruckusSCGAPConfUpdatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 30)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGAPConfigID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPConfUpdatedTrap.setDescription("Trigger when there is an AP configuration updated event.  \nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, configure ID, event code and AP IPv6 address are enclosed.")
ruckusSCGAPSwapOutModelDiffTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 31)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGAPModel"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGConfigAPModel"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPSwapOutModelDiffTrap.setDescription("Trigger when there is an AP model is different from imported swap AP model.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name,AP mode, configure AP model, event code and AP IPv6 address are enclosed.")
ruckusSCGAPPreProvisionModelDiffTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 32)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGAPModel"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGConfigAPModel"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPPreProvisionModelDiffTrap.setDescription("Trigger when there is an AP model is different from imported pre-provision AP model.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name,AP mode, configure AP model, event code and AP IPv6 address are enclosed.")
ruckusSCGAPDiscoveryFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 33)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPDiscoveryFailTrap.setDescription("Trigger when there is an AP discovery failed event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, SCG control IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPFirmwareUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 34)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPFirmwareUpdateFailedTrap.setDescription("Trigger when there is an AP firmware update failed event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPFirmwareUpdatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 35)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPFirmwareUpdatedTrap.setDescription("Trigger when there is an AP firmware update success event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPWlanOversubscribedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 36)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPWlanOversubscribedTrap.setDescription("Trigger when there is an AP WLAN oversubscribed event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name and event code are enclosed.")
ruckusSCGAPFactoryResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 37)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPFactoryResetTrap.setDescription("Trigger when there is an AP factory reset event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGCableModemDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 38)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGCableModemDownTrap.setDescription("Trigger when there is an AP cable modem down event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGCableModemRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 39)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGCableModemRebootTrap.setDescription("Trigger when there is an AP cable modem reboot event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPJoinZoneFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 40)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventTargetZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPJoinZoneFailedTrap.setDescription("Trigger when there is an AP failed to join to a specify zone event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, target zone name, failure reason, event code and AP IPv6 address are enclosed.")
ruckusSCGAPManagedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 41)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPManagedTrap.setDescription("Trigger when there is an AP managed event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, SCG control IP address and event code are enclosed.")
ruckusSCGCPUUsageThresholdBackToNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 42)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGCPUPerc"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGCPUUsageThresholdBackToNormalTrap.setDescription("Trigger when there is a SCG CPU threshold back to normal event.\nThe event severity, event type, node name, MAC address, CPU usage percent and event code are enclosed.")
ruckusSCGMemoryUsageThresholdBackToNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 43)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGMemoryPerc"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGMemoryUsageThresholdBackToNormalTrap.setDescription("Trigger when there is a SCG memory threshold back to normal event.\nThe event severity, event type, node name, MAC address, memory usage percent and event code are enclosed.")
ruckusSCGDiskUsageThresholdBackToNormalTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 44)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDiskPerc"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGDiskUsageThresholdBackToNormalTrap.setDescription("Trigger when there is a SCG disk threshold back to normal event.\nThe event severity, event type, node name, MAC address, disk usage percent and event code are enclosed.")
ruckusSCGCableModemUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 45)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGCableModemUpTrap.setDescription("Trigger when there is an AP cable modem up event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPDiscoverySuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 46)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPDiscoverySuccessTrap.setDescription("Trigger when there is an AP discovery success event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, SCG control IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGCMResetByUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 47)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGCMResetByUserTrap.setDescription("Trigger when there is an AP cable modem soft-rebooted by user event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event reason, event code and AP IPv6 address are enclosed.")
ruckusSCGCMResetFactoryByUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 48)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGCMResetFactoryByUserTrap.setDescription("Trigger when there is an AP cable modem set to factory default by user event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event reason, event code and AP IPv6 address are enclosed.")
ruckusSCGSSIDSpoofingRogueAPDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 50)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSSID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventRogueMac"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGSSIDSpoofingRogueAPDetectedTrap.setDescription("Trigger when there is an AP detects a rogue AP event.\nThe event severity, event type, rogue AP MAC address, ssid, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGMacSpoofingRogueAPDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 51)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSSID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventRogueMac"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGMacSpoofingRogueAPDetectedTrap.setDescription("Trigger when there is an AP detects a rogue AP event.\nThe event severity, event type, rogue AP MAC address, ssid, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGSameNetworkRogueAPDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 52)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSSID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventRogueMac"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGSameNetworkRogueAPDetectedTrap.setDescription("Trigger when there is an AP detects a rogue AP which has the same bssid with detect AP event.\nThe event severity, event type, rogue AP MAC address, ssid, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGADHocNetworkRogueAPDetectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 53)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSSID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventRogueMac"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGADHocNetworkRogueAPDetectedTrap.setDescription("Trigger when there is an AP detects a rogue AP which has the same network detecting AP event.\nThe event severity, event type, rogue AP MAC address, ssid, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name and event code are enclosed.")
ruckusSCGMaliciousRogueAPTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 54)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventRogueMac"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGMaliciousRogueAPTimeoutTrap.setDescription("Trigger when there is a rogue AP disappears event.\nThe event severity, event type, rogue AP MAC address, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPLBSConnectSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 55)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSURL"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPLBSConnectSuccessTrap.setDescription("Trigger when there is AP successfully connect to LS event.\nThe event severity, event type,AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, LBS server URL, LBS port, event code and AP IPv6 address are enclosed.")
ruckusSCGAPLBSNoResponsesTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 56)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSURL"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPLBSNoResponsesTrap.setDescription("Trigger when there is an AP connect to LS no response event.\nThe event severity, event type,AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, LBS server URL, LBS port, event code and AP IPv6 address are enclosed.")
ruckusSCGAPLBSAuthFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 57)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSURL"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPLBSAuthFailedTrap.setDescription("Trigger when there is an AP connect LS authentication failure event.\nThe event severity, event type,AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, LBS server URL, LBS port, event code and AP IPv6 address are enclosed.")
ruckusSCGAPLBSConnectFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 58)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSURL"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPLBSConnectFailedTrap.setDescription("Trigger when there is an AP failed connect to LS event.\nThe event severity, event type,AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, LBS server URL, LBS port, event code and AP IPv6 address are enclosed.")
ruckusSCGAPTunnelBuildFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 60)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPTunnelBuildFailedTrap.setDescription("Trigger when there is an AP build tunnel failed event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, SCG DP IP address, failure reason, event code and AP IPv6 address are enclosed.")
ruckusSCGAPTunnelBuildSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 61)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPTunnelBuildSuccessTrap.setDescription("Trigger when there is an AP build tunnel success event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates,  zone name, SCG DP IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPTunnelDisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 62)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPTunnelDisconnectedTrap.setDescription("Trigger when there is an AP tunnel disconnected event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, SCG DP IP address, failure reason, event code and AP IPv6 address are enclosed.")
ruckusSCGAPSoftGRETunnelFailoverPtoSTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 65)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusPrimaryGRE"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSecondaryGRE"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPSoftGRETunnelFailoverPtoSTrap.setDescription("Trigger when there is an AP softGRE tunnel fails over primary to secondary event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, primary GRE gateway, secondary GRE gateway, event code and AP IPv6 address are enclosed.")
ruckusSCGAPSoftGRETunnelFailoverStoPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 66)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusPrimaryGRE"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSecondaryGRE"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPSoftGRETunnelFailoverStoPTrap.setDescription("Trigger when there is an AP softGRE tunnel fails over secondary to primary event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, primary GRE gateway, secondary GRE gateway, event code and AP IPv6 address are enclosed.")
ruckusSCGAPSoftGREGatewayNotReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 67)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSoftGREGatewayList"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPSoftGREGatewayNotReachableTrap.setDescription("Trigger when there is an AP softGRE gateway not reachable event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, soft GRE gateway list, event code and AP IPv6 address are enclosed.")
ruckusSCGAPSoftGREGatewayReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 68)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSoftGREGWAddress"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPSoftGREGatewayReachableTrap.setDescription("Trigger when there is an AP softGRE gateway reachable event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, soft GRE gateway IP address and event code are enclosed.")
ruckusSCGDPConfUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 70)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPConfigID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPConfUpdateFailedTrap.setDescription("Trigger when there is DP configuration update failed event.\nThe event severity, event type, DP's identifier, configuration UUID and event code are enclosed.")
ruckusSCGDPLostHeartbeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 71)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPLostHeartbeatTrap.setDescription("Trigger when there is DP lost heart beat event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGDPDisconnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 72)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPDisconnectedTrap.setDescription("Trigger when there is DP disconnected event.\nThe event severity, event code, event type , DP's identifier, SCG control IP address and event code are enclosed.")
ruckusSCGDPPhyInterfaceDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 73)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGNetworkPortID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPPhyInterfaceDownTrap.setDescription("Trigger when there is DP physical interface down event.\nThe event severity, event type, DP's identifier, network port ID and event code are enclosed.")
ruckusSCGDPStatusUpdateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 74)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPStatusUpdateFailedTrap.setDescription("Trigger when there is DP update status failed event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGDPStatisticUpdateFaliedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 75)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPStatisticUpdateFaliedTrap.setDescription("Trigger when there is DP update statistical failed event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGDPConnectedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 76)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPConnectedTrap.setDescription("Trigger when there is DP connected event.\nThe event severity, event type, DP's identifier, SCG control IP and event code are enclosed.")
ruckusSCGDPPhyInterfaceUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 77)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGNetworkPortID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPPhyInterfaceUpTrap.setDescription("Trigger when there is DP physical interface up event.\nThe event severity, event type, DP's identifier, network port ID and event code are enclosed.")
ruckusSCGDPConfUpdatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 78)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPConfigID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPConfUpdatedTrap.setDescription("Trigger when there is DP configuration updated event.\nThe event severity, event type, DP's identifier, configuration UUID and event code are enclosed.")
ruckusSCGDPTunnelTearDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 79)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPTunnelTearDownTrap.setDescription("Trigger when there is DP tear down tunnel event.\nThe event severity, event type, DP's identifier, AP MAC address, event reason and event code are enclosed.")
ruckusSCGDPRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 80)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPRebootTrap.setDescription("Trigger when there is DP reboot event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGDPAcceptTunnelRequestTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 81)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPAcceptTunnelRequestTrap.setDescription("Trigger when there is data plane accepts a tunnel request from the AP event.\nThe event severity, event type, DP's identifier, AP MAC address and event code are enclosed.")
ruckusSCGDPRejectTunnelRequestTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 82)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPRejectTunnelRequestTrap.setDescription("Trigger occurs where there is data plane rejects a tunnel request from the AP event.\nThe event severity, event type, DP's identifier, AP MAC address, event reason and event code are enclosed.")
ruckusSCGDPSgreGWUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 83)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSoftGREGWAddress"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPSgreGWUnreachableTrap.setDescription("Trigger when there is data plane detects that a core network gateway is unreachable event.\nThe event severity, event type, DP's identifier, core gateway address and event code are enclosed.")
ruckusSCGDPSgreGWReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 84)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSoftGREGWAddress"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPSgreGWReachableTrap.setDescription("Trigger when there is data plane detects that a core network gateway is reachable event.\nThe event severity, event type, DP's identifier, core gateway address and event code are enclosed.")
ruckusSCGDPTunnelSetUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 85)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPTunnelSetUpTrap.setDescription("Trigger when there is DP set up tunnel event.\nThe event severity, event type, DP's identifier, AP MAC address and event code are enclosed.")
ruckusSCGDPDiscoverySuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 86)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPDiscoverySuccessTrap.setDescription("Trigger when there is a DP discovery success event.\nThe event severity, event type, DP's identifier, SCG control IP address and event code are enclosed.")
ruckusSCGDPDiscoveryFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 87)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPDiscoveryFailTrap.setDescription("Trigger when there is a DP discovery failed event.\nThe event severity, event type, DP's identifier, SCG control IP address and event code are enclosed.")
ruckusSCGDPSgreGWInactTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 88)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSoftGREGWAddress"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPSgreGWInactTrap.setDescription("Trigger when there is data plane detects that a core network gateway is inactive event.\nThe event severity, event type, DP's identifier, core gateway address and event code are enclosed.")
ruckusSCGDPSgreGWActTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 89)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSoftGREGWAddress"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPSgreGWActTrap.setDescription("Trigger when there is data plane detects that a core network gateway is active event.\nThe event severity, event type, DP's identifier, core gateway address and event code are enclosed.")
ruckusSCGDPPktPoolLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 90)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPPacketPoolID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPPktPoolLowTrap.setDescription("Trigger when there is data core's packet pool in under low water mark event.\nThe event severity, event type, DP's identifier, DP's packet pool ID and event code are enclosed.")
ruckusSCGDPPktPoolCriticalLowTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 91)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPPacketPoolID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPPktPoolCriticalLowTrap.setDescription("Trigger when there is data core's packet pool in under critical low water mark event.\nThe event severity, event type, DP's identifier, DP's packet pool ID and event code are enclosed.")
ruckusSCGDPPktPoolRecoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 92)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPPacketPoolID"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPPktPoolRecoverTrap.setDescription("Trigger when there is when data core's packet pool in above high water mark event.\nThe event severity, event type, DP's identifier, DP's packet pool ID and event code are enclosed.")
ruckusSCGDPCoreDeadTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 93)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPCoreDeadTrap.setDescription("Trigger when there is one or more data core dead event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGDPDeletedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 94)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPDeletedTrap.setDescription("Trigger when there is a DP is deleted event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGDPUpgradeStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 95)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPUpgradeStartTrap.setDescription("Trigger when there is DP started the upgrade process event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGDPUpgradingTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 96)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPUpgradingTrap.setDescription("Trigger when there is DP has started to upgrade program and configuration event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGDPUpgradeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 97)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPUpgradeSuccessTrap.setDescription("Trigger when there is DP has been upgraded successfully event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGDPUpgradeFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 98)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPKey"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDPUpgradeFailedTrap.setDescription("Trigger when there is DP failed to upgrade event.\nThe event severity, event type, DP's identifier and event code are enclosed.")
ruckusSCGClientMiscEventTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 100)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventClientMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClientMiscEventTrap.setDescription("Generic trap triggered by specified client related miscellaneous event. \nThe event severity, event type, client MAC address, event description and event code are enclosed.")
ruckusSCGNodeJoinFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 200)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeJoinFailedTrap.setDescription("Trigger when there is new node join failed event.\nThe event severity, event type, node name, node MAC address, cluster name and event code are enclosed.")
ruckusSCGNodeRemoveFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 201)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeRemoveFailedTrap.setDescription("Trigger when there is remove node failed event.\nThe event severity, event type, node name,node MAC address, cluster name and event code are enclosed.")
ruckusSCGNodeOutOfServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 202)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeOutOfServiceTrap.setDescription("Trigger when there is node out of service event.\nThe event severity, event type, node name,node MAC address, cluster name and event code are enclosed.")
ruckusSCGClusterInMaintenanceStateTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 203)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterInMaintenanceStateTrap.setDescription("Trigger when there is cluster in maintenance state event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterBackupFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 204)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterBackupFailedTrap.setDescription("Trigger when there is backup cluster failed event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterRestoreFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 205)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterRestoreFailedTrap.setDescription("Trigger when there is restore cluster failed event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterAppStoppedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 206)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessName"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterAppStoppedTrap.setDescription("Trigger when there is cluster application stop event.\nThe event severity, event type, application name, SCG node name, node MAC address and event code are enclosed.")
ruckusSCGNodeBondInterfaceDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 207)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGNetworkInterface"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeBondInterfaceDownTrap.setDescription("Trigger when there is node bond interface down event.\nThe event severity, event type, network interface, SCG node name, node MAC address and event code are enclosed.")
ruckusSCGNodePhyInterfaceDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 208)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGNetworkInterface"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodePhyInterfaceDownTrap.setDescription("Trigger when there is node physical interface down event.\nThe event severity, event type, network interface, SCG node name, node MAC address and event code are enclosed.")
ruckusSCGClusterLeaderChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 209)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterLeaderChangedTrap.setDescription("Trigger when there is cluster leader changed event.\nThe event severity, event type, SCG node name, node MAC address, cluster name and event code are enclosed.")
ruckusSCGClusterUpgradeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 210)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventUpgradedFirmwareVersion"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventFirmwareVersion"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterUpgradeSuccessTrap.setDescription("Trigger when there is upgrade entire cluster success event.\nThe event severity, event type, cluster name, firmware version, upgraded firmware version and event code are enclosed.")
ruckusSCGNodeBondInterfaceUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 211)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGNetworkInterface"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeBondInterfaceUpTrap.setDescription("Trigger when there is node bond interface up event.\nThe event severity, event type, network interface, SCG node name, SCG MAC address and event code are enclosed.")
ruckusSCGNodePhyInterfaceUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 212)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGNetworkInterface"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodePhyInterfaceUpTrap.setDescription("Trigger when there is node physical interface up event.\nThe event severity, event type,network interface, SCG node name, SCG MAC address and event code are enclosed.")
ruckusSCGClusterBackToInServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 216)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterBackToInServiceTrap.setDescription("Trigger when there is cluster back to in service event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGBackupClusterSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 217)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGBackupClusterSuccessTrap.setDescription("Trigger when there is backup cluster success event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGNodeJoinSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 218)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeJoinSuccessTrap.setDescription("Trigger when there is new node join success event.\nThe event severity, event type, SCG node name, node MAC address, cluster name and event code are enclosed.")
ruckusSCGClusterAppStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 219)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessName"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterAppStartTrap.setDescription("Trigger when there is cluster application start event.\nThe event severity, event type, application name, SCG node name, node MAC address and event code are enclosed.")
ruckusSCGNodeRemoveSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 220)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeRemoveSuccessTrap.setDescription("Trigger when there is remove node success event.\nThe event severity, event type, SCG node name, node MAC address, cluster name and event code are enclosed.")
ruckusSCGClusterRestoreSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 221)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterRestoreSuccessTrap.setDescription("Trigger when there is restore cluster success event.\nThe event severity, event type, SCG node name, node MAC address, cluster name and event code are enclosed.")
ruckusSCGNodeBackToInServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 222)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGNodeBackToInServiceTrap.setDescription("Trigger when there is node back to in service event.\nThe event severity, event type, SCG node name, node MAC address, cluster name and event code are enclosed.")
ruckusSCGSshTunnelSwitchedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 223)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSwitchStatus"), ))
if mibBuilder.loadTexts:
	ruckusSCGSshTunnelSwitchedTrap.setDescription("Trigger when there is SSH tunnel switched event.\nThe event severity, event type, SCG node name, node MAC address, cluster name, switch status and event code are enclosed.")
ruckusSCGClusterCfgBackupStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 224)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterCfgBackupStartTrap.setDescription("Trigger when there is a configuration backup start event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterCfgBackupSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 225)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterCfgBackupSuccessTrap.setDescription("Trigger when there is a configuration backup success event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterCfgBackupFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 226)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterCfgBackupFailedTrap.setDescription("Trigger when there is a configuration backup failed event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterCfgRestoreSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 227)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterCfgRestoreSuccessTrap.setDescription("Trigger when there is a configuration restore success event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterCfgRestoreFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 228)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterCfgRestoreFailedTrap.setDescription("Trigger when there is a configuration restore failed event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterUploadSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 229)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterUploadSuccessTrap.setDescription("Trigger when there is a cluster upload success event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterUploadFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 230)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterUploadFailedTrap.setDescription("Trigger when there is a cluster upload failed event.\nThe event severity, event type, cluster name, failure reason and event code are enclosed.")
ruckusSCGClusterOutOfServiceTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 231)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterOutOfServiceTrap.setDescription("Trigger when there is a cluster out of service event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterUploadVDPFirmwareStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 232)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterUploadVDPFirmwareStartTrap.setDescription("Trigger when there is a cluster upload vDP firmware process starts event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterUploadVDPFirmwareSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 233)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterUploadVDPFirmwareSuccessTrap.setDescription("Trigger when there is a cluster uploaded vDP firmware successfully event.\nThe event severity, event type, cluster name and event code are enclosed.")
ruckusSCGClusterUploadVDPFirmwareFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 234)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGClusterName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGClusterUploadVDPFirmwareFailedTrap.setDescription("Trigger when there is a cluster failed to upload vDP firmware event.\nThe event severity, event type, cluster name, failure reason and event code are enclosed.")
ruckusSCGIpmiVotageTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 250)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiVotageTrap.setDescription("Trigger when there is baseboard voltage event.\nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiTempBBTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 251)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiTempBBTrap.setDescription("Trigger when there is baseboard temperature event.\nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiTempFPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 252)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiTempFPTrap.setDescription("Trigger when there is front panel temperature event.\nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiTempIOHTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 253)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiTempIOHTrap.setDescription("Trigger when there is chip set temperature event. \nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiTempMemPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 254)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessorId"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiTempMemPTrap.setDescription("Trigger when there is processor memory temperature event.\nThe event severity, event type, processor id, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiTempPSTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 255)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiTempPSTrap.setDescription("Trigger when there is power supply temperature event.\nThe event severity, event type, SCG node name,power supply id, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiTempPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 256)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessorId"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiTempPTrap.setDescription("Trigger when there is processor temperature event.\nThe event severity, event type, processor id, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiTempHSBPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 257)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiTempHSBPTrap.setDescription("Trigger when there is hot swap backplane temperature event.\nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 258)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFanStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFanId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiFanTrap.setDescription("Trigger when there is system fan event.\nThe event severity, event type, fan id, fan status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 259)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiPowerTrap.setDescription("Trigger when there is power supply input event.\nThe event severity, event type, power supply id,  power supply status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiCurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 260)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiCurrentTrap.setDescription("Trigger when there is current power supply output event.\nThe event severity, event type, power supply id, power supply status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 261)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFanStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFanId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiFanStatusTrap.setDescription("Trigger when there is fan module event.\nThe event severity, event type, fan id, fan status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiPsStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 262)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiPsStatusTrap.setDescription("Trigger when there is power supply event.\nThe event severity, event type, power supply id, power supply status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiDrvStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 263)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDrvStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDrvId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiDrvStatusTrap.setDescription("Trigger when there is disk drive event.\nThe event severity, event type, disk drive id, disk drive status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiREVotageTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 264)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiREVotageTrap.setDescription("Trigger when there is voltage status recover from abnormal condition event.\nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiRETempBBTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 265)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiRETempBBTrap.setDescription("Trigger when there is baseboard temperature status recover from abnormal condition event.\nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiRETempFPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 266)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiRETempFPTrap.setDescription("Trigger when there is front panel temperature status recover from abnormal condition event.\nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiRETempIOHTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 267)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiRETempIOHTrap.setDescription("Trigger when there is chip set temperature status recover from abnormal condition event. \nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiRETempMemPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 268)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessorId"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiRETempMemPTrap.setDescription("Trigger when there is processor memory temperature status recover from abnormal condition event.\nThe event severity, event type, processor id, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiRETempPSTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 269)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiRETempPSTrap.setDescription("Trigger when there is power supply temperature status recover from abnormal condition event.\nThe event severity, event type, SCG node name,power supply id, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiRETempPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 270)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessorId"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiRETempPTrap.setDescription("Trigger when there is processor temperature status recover from abnormal condition event.\nThe event severity, event type, processor id, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiRETempHSBPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 271)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGTemperatureStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiRETempHSBPTrap.setDescription("Trigger when there is hot swap backplane temperature status recover from abnormal condition event.\nThe event severity, event type, temperature status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiREFanTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 272)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFanStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFanId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiREFanTrap.setDescription("Trigger when there is system fan module status recover from abnormal condition.\nThe event severity, event type, fan id, fan status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiREPowerTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 273)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiREPowerTrap.setDescription("Trigger when there is power supply AC power input status recover from abnormal condition event.\nThe event severity, event type, power supply id,  power supply status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiRECurrentTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 274)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiRECurrentTrap.setDescription("Trigger when there is power supply and the maximum voltage output status recover from abnormal condition event.\nThe event severity, event type, power supply id, power supply status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiREFanStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 275)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFanStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFanId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiREFanStatusTrap.setDescription("Trigger when there is fan module status recover from abnormal condition event.\nThe event severity, event type, fan id, fan status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiREPsStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 276)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPsId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiREPsStatusTrap.setDescription("Trigger when there is power supply status recover from abnormal condition event.\nThe event severity, event type, power supply id, power supply status, SCG node MAC address and event code are enclosed.")
ruckusSCGIpmiREDrvStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 277)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDrvStatus"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDrvId"), ))
if mibBuilder.loadTexts:
	ruckusSCGIpmiREDrvStatusTrap.setDescription("Trigger when there is disk drive status recover from abnormal condition event.\nThe event severity, event type, disk drive id, disk drive status, SCG node MAC address and event code are enclosed.")
ruckusSCGFtpTransferErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 280)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFtpIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFileName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGFtpPort"), ))
if mibBuilder.loadTexts:
	ruckusSCGFtpTransferErrorTrap.setDescription("Trigger when there is FTP transfer error event.\nThe event severity, event type, FTP server IP address, FTP server port, file name, SCG node MAC address and event code are enclosed.")
ruckusSCGSystemLBSConnectSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 290)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSURL"), ))
if mibBuilder.loadTexts:
	ruckusSCGSystemLBSConnectSuccessTrap.setDescription("Trigger when there is SCG successfully connect to LS event.\nThe event severity, event type, SCG node MAC address, management IP address, LBS server URL, LBS port and event code are enclosed.")
ruckusSCGSystemLBSNoResponseTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 291)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSURL"), ))
if mibBuilder.loadTexts:
	ruckusSCGSystemLBSNoResponseTrap.setDescription("Trigger when there is SCG connect to LS no response event.\nThe event severity, event type, SCG node MAC address, management IP address, LBS server URL, LBS port and event code are enclosed.")
ruckusSCGSystemLBSAuthFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 292)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSURL"), ))
if mibBuilder.loadTexts:
	ruckusSCGSystemLBSAuthFailedTrap.setDescription("Trigger when there is SCG connect LS authentication failure event.\nThe event severity, event type, SCG node MAC address, management IP address, LBS server URL, LBS port and event code are enclosed.")
ruckusSCGSystemLBSConnectFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 293)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLBSURL"), ))
if mibBuilder.loadTexts:
	ruckusSCGSystemLBSConnectFailedTrap.setDescription("Trigger when there is SCG failed connect to LS event.\nThe event severity, event type, SCG node MAC address, management IP address, LBS server URL, LBS port and event code are enclosed.")
ruckusSCGProcessRestartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 300)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessName"), ))
if mibBuilder.loadTexts:
	ruckusSCGProcessRestartTrap.setDescription("Trigger when there is process restart event.\nThe event severity, event type, process name, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGServiceUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 301)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessName"), ))
if mibBuilder.loadTexts:
	ruckusSCGServiceUnavailableTrap.setDescription("Trigger when there is service unavailable event.\nThe event severity, event type, process name, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGKeepAliveFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 302)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessName"), ))
if mibBuilder.loadTexts:
	ruckusSCGKeepAliveFailureTrap.setDescription("Trigger when there is service keep alive failure event.\nThe event severity, event type, source process name, process name, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGResourceUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 304)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGResourceUnavailableTrap.setDescription("Trigger when there is resource unavailable event.\nThe event severity, event type, source process name, SCG node MAC address, management IP address, reason and event code are enclosed.")
ruckusSCGSmfRegFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 305)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ))
if mibBuilder.loadTexts:
	ruckusSCGSmfRegFailedTrap.setDescription("Trigger when there is SMF registration failed event.\nThe event severity, event type, source process name, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGHipFailoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 306)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ))
if mibBuilder.loadTexts:
	ruckusSCGHipFailoverTrap.setDescription("Trigger when there is HIP failover event.\nThe event severity, event type, source process name, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGConfUpdFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 307)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGProcessName"), ))
if mibBuilder.loadTexts:
	ruckusSCGConfUpdFailedTrap.setDescription("Trigger when there is configuration update failed event.\nThe event severity, event type, process name, SCG node MAC address, management IP address, failure reason and event code are enclosed.")
ruckusSCGConfRcvFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 308)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGConfRcvFailedTrap.setDescription("Trigger when there is SCG configuration receive failed event.\nThe event severity, event type, SCG node MAC address, management IP address, failure reason and event code are enclosed.")
ruckusSCGLostCnxnToDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 309)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ))
if mibBuilder.loadTexts:
	ruckusSCGLostCnxnToDbladeTrap.setDescription("Trigger when there is lost connection to DP event.\nThe event severity, event type, SCG control IP address, DP IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGGgsnRestartedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 310)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGGtpcIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGGgsnIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGGgsnRestartedTrap.setDescription("Trigger when there is GGSN restarted event.\nThe event severity, event type, GGSN IP address, GTP IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGGgsnNotReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 311)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGGtpcIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGGgsnIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGGgsnNotReachableTrap.setDescription("Trigger when there is GGSN not reachable event.\nThe event severity, event type, GGSN IP address, GTP IP address, SCG node MAC address and event code are enclosed.")
ruckusSCGGgsnNotResolvedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 312)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEMsisdn"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGApn"), ))
if mibBuilder.loadTexts:
	ruckusSCGGgsnNotResolvedTrap.setDescription("Trigger when there is GGSN not resolved event.\nThe event severity, event type, APN, UE IMSI, UE msisdn, SCG node MAC address and event code are enclosed.")
ruckusSCGUnknownUETrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 313)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEMsisdn"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventClientMacAddr"), ))
if mibBuilder.loadTexts:
	ruckusSCGUnknownUETrap.setDescription("Trigger when there is unknown UE event.\nThe event severity, event type, client MAC address, UE msisdn, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGAuthSrvrNotReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 314)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGAuthSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRadProxyIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGAuthSrvrNotReachableTrap.setDescription("Trigger when there is authentication server not reachable event.\nThe event severity, event type, authentication server IP address, radius proxy IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGAccSrvrNotReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 315)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGAccSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRadProxyIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGAccSrvrNotReachableTrap.setDescription("Trigger when there is accounting server not reachable event.\nThe event severity, event type, accounting server IP address, radius proxy IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGUnknownRealmTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 316)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRealm"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGUnknownRealmTrap.setDescription("Trigger when there is unknown realm.\nThe event severity, event type, realm name, SCG node MAC address and event code are enclosed.")
ruckusSCGAuthFailedNonPermanentIDTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 317)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEMsisdn"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAuthFailedNonPermanentIDTrap.setDescription("Trigger when there is non-permanent ID authentication failed event.\nThe event severity, event type, UE IMSI, UE msisdn, SCG node MAC address, management IP address, failure reason and event code are enclosed.")
ruckusSCGCnxnToCgfFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 318)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRadSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGCgfSrvrIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGCnxnToCgfFailedTrap.setDescription("Trigger when there is connection to CGF failed.\nThe event severity, event type, CGF sever IP address, radius server IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGCdrTransferFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 319)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRadSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGCgfSrvrIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGCdrTransferFailedTrap.setDescription("Trigger when there is CDR transfer failed event.\nThe event severity, event type, CGF sever IP address, radius server IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGCdrGenerateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 320)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRadSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGCdrGenerateFailedTrap.setDescription("Trigger when there is CDR generation failed event.\nThe event severity, event type, radius server IP address,SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGDestNotRecheableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 321)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPointCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDestNotRecheableTrap.setDescription("Trigger when there is destination not reachable.\nThe event severity, event type, point code, SCG node MAC address and event code are enclosed.")
ruckusSCGAppServerDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 324)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPointCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRoutingContext"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSSN"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAppServerDownTrap.setDescription("Trigger when there is application server down event.\nThe event severity, event type, routing context, local point code, local SSN, SCG node MAC address and event code are enclosed.")
ruckusSCGAppServerInactiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 325)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPointCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRoutingContext"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSSN"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAppServerInactiveTrap.setDescription("Trigger when there is application server inactive event.\nThe event severity, event type, routing context, local point code, local SSN, SCG node MAC address and event code are enclosed.")
ruckusSCGAssocCantStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 326)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDestIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDestPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAssocCantStartTrap.setDescription("Trigger when there is association can not start event.\nThe event severity, event type, source IP address, source port, destination IP address, destination port, SCG node MAC address and event code are enclosed.")
ruckusSCGAssocDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 327)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDestIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDestPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAssocDownTrap.setDescription("Trigger when there is association down event.\nThe event severity, event type, source IP address, source port, destination IP address, destination port, SCG node MAC address and event code are enclosed.")
ruckusSCGOutboundRoutingFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 328)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGHlrInstance"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGOperation"), ))
if mibBuilder.loadTexts:
	ruckusSCGOutboundRoutingFailedTrap.setDescription("Trigger when there is outbound routing failure event.\nThe event severity, event type, route operation, UE IMSI, HLR instance, SCG node MAC address and event code are enclosed.")
ruckusSCGDidAllocationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 329)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDidAllocationFailureTrap.setDescription("Trigger when there is did allocation failure event.\nThe event severity, event type, node MAC address and event code are enclosed.")
ruckusSCGPdnGwUnresolvedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 331)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGApn"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEMsisdn"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPdnGwUnresolvedTrap.setDescription("Trigger when there is PDN gateway could not be resolved.\nThe event severity, event type, source process name, APN, UE IMSI, UE msisdn, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPdnGwVersionUnsupportedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 332)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPgwIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ))
if mibBuilder.loadTexts:
	ruckusSCGPdnGwVersionUnsupportedTrap.setDescription("Trigger when there is PDN gateway version not supported event.\nThe event severity, event type, source process name, PGW IP adress, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPdnGwAssociationDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 333)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPgwIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ))
if mibBuilder.loadTexts:
	ruckusSCGPdnGwAssociationDownTrap.setDescription("Trigger when there is association PDN gateway down.\nThe event severity, event type, source process name, PGW IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGCreateSessionResponseFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 334)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPgwIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRealm"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGCreateSessionResponseFailedTrap.setDescription("Trigger when there is create session response failed event.\nThe event severity, event type, source process name, PGW IP address, UE IMSI, realm name, SCG node MAC address, management IP address, failure reason and event code are enclosed.")
ruckusSCGDecodeFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 335)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPgwIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ))
if mibBuilder.loadTexts:
	ruckusSCGDecodeFailedTrap.setDescription("Trigger when there is decode failed event.\nThe event severity, event type, source process name, PGW IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGModifyBearerResponseFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 336)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPgwIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRealm"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGModifyBearerResponseFailedTrap.setDescription("Trigger when there is modify bearer response failed event.\nThe event severity, event type, source process name, PGW IP address, UE IMSI, realm name, SCG node MAC address, management IP address, failure reason and event code are enclosed.")
ruckusSCGDeleteSessionResponseFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 337)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPgwIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRealm"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDeleteSessionResponseFailedTrap.setDescription("Trigger when there is delete session response failed event.\nThe event severity, event type, source process name, PGW IP address, UE IMSI, realm name, SCG node MAC address, management IP address, failure reason and event code are enclosed.")
ruckusSCGDeleteBearerRequestFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 338)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPgwIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRealm"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDeleteBearerRequestFailedTrap.setDescription("Trigger when there is delete bearer request failed event.\nThe event severity, event type, source process name, PGW IP address, realm name, SCG node MAC address, management IP address, failure reason and event code are enclosed.")
ruckusSCGUpdateBearerRequestFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 339)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPgwIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventReason"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRealm"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGUpdateBearerRequestFailedTrap.setDescription("Trigger when there is update bearer request failed event.\nThe event severity, event type, source process name, PGW IP address, realm name, SCG node MAC address, management IP address, failure reason and event code are enclosed.")
ruckusSCGCgfServerNotConfiguredTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 340)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGGgsnIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGCgfSrvrIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGCgfServerNotConfiguredTrap.setDescription("Trigger when there is CGF server IP received from GGSN or PDN gateway not configured event.\nThe event severity, event type, CGF sever IP address, GGSN IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGTtgSessionCriticalThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 342)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGTtgSessionCriticalThresholdTrap.setDescription("Trigger when there is TTG session critical threshold event.\nThe event severity, event type, SCG node MAC address and event code are enclosed.")
ruckusSCGTtgSessionLicenseInsufficientTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 343)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGTtgSessionLicenseInsufficientTrap.setDescription("Trigger when there is TTG session license exhausted event.\nThe event severity, event type, SCG node MAC address and event code are enclosed.")
ruckusSCGAPAcctMsgMandatoryPrmMissingTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 344)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUserName"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPAcctMsgMandatoryPrmMissingTrap.setDescription("Trigger when there is AP accounting message mandatory parameter missing event.\nThe event severity, event type, source process name,AP IP address, user name, SCG node MAC address, management IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAcctUnknownRealmTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 345)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUserName"), ))
if mibBuilder.loadTexts:
	ruckusSCGAcctUnknownRealmTrap.setDescription("Trigger when there is unknown realm accounting event.\nThe event severity, event type, source process name, AP IP address,user name, SCG node MAC address, management IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPAcctMsgDecodeFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 346)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPAcctMsgDecodeFailedTrap.setDescription("Trigger when there is AP accounting message decode failed event.\nThe event severity, event type, source process name, AP IP address, SCG node MAC address, management IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPAcctRespWhileInvalidConfigTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 347)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUserName"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPAcctRespWhileInvalidConfigTrap.setDescription("Trigger when there is SCG sends response to AP accounting message while configuration is incorrect in SCG to forward received message or to generate CDR event.\nThe event severity, event type, source process name, AP IP address, user Name, SCG node MAC address, management IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPAcctMsgDropNoAcctStartMsgTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 348)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUserName"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPAcctMsgDropNoAcctStartMsgTrap.setDescription("Trigger when there is accounting message from AP dropped Acct Interim/Stop message as Account Start no received from AP event.\nThe event severity, event type, source process name, AP IP address, user Name, SCG node MAC address, management IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGUnauthorizedCoaDmMessageDroppedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 349)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRadSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcProcess"), ))
if mibBuilder.loadTexts:
	ruckusSCGUnauthorizedCoaDmMessageDroppedTrap.setDescription("Trigger when there is received COA/DM from unauthorized AAA server event.\nThe event severity, event type, source process name, AAA server IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGConnectedToDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 350)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ))
if mibBuilder.loadTexts:
	ruckusSCGConnectedToDbladeTrap.setDescription("Trigger when there is successful connection to DP event.\nThe event severity, event type, SCG control IP address, DP IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGDestAvailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 351)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPointCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGDestAvailableTrap.setDescription("Trigger when there is destination available event.\nThe event severity, event type, point code, SCG node MAC address and event code are enclosed.")
ruckusSCGAppServerActiveTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 352)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGPointCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRoutingContext"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSSN"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAppServerActiveTrap.setDescription("Trigger when there is application server active event.\nThe event severity, event type, routing context, local point code, local SSN, SCG node MAC address and event code are enclosed.")
ruckusSCGAssocUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 353)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDestIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDestPort"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGAssocUpTrap.setDescription("Trigger when there is association up event.\nThe event severity, event type, source IP address, source port, destination IP address, destination port, SCG node MAC address and event code are enclosed.")
ruckusSCGSessUpdatedAtDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 354)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEMsisdn"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGSessUpdatedAtDbladeTrap.setDescription("Trigger when there is session updates the request (C-D-SESS-UPD-REQ) successfully event.\nThe event severity, event type, SCG control IP address, SCG DP IP address, UE IMSI, UE msisdn, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGSessUpdateErrAtDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 355)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEMsisdn"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGSessUpdateErrAtDbladeTrap.setDescription("Trigger when there is session updates the request (C-D-SESS-UPD-REQ) failed event.\nThe event severity, event type, SCG control IP address, SCG DP IP address, UE IMSI, UE msisdn, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGSessDeletedAtDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 356)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEMsisdn"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGSessDeletedAtDbladeTrap.setDescription("Trigger when there is session deletes request (C-D-SESS-DEL-REQ) successfully event.\nThe event severity, event type, SCG control IP address, SCG DP IP address, UE IMSI, UE msisdn, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGSessDeleteErrAtDbladeTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 357)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEImsi"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCtrlIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGUEMsisdn"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGSessDeleteErrAtDbladeTrap.setDescription("Trigger when there is session deletes request (C-D-SESS-DEL-REQ) failed event.\nThe event severity, event type, SCG control IP address, SCG DP IP address, UE IMSI, UE msisdn, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGLicenseSyncSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 358)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLicenseServerName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGLicenseSyncSuccessTrap.setDescription("Trigger when there is license data syncs up with license server successfully event.\nThe event severity, event type, node name, license server name and event code are enclosed.")
ruckusSCGLicenseSyncFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 359)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLicenseServerName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGLicenseSyncFailedTrap.setDescription("Trigger when there is license data syncs up with license server failed event.\nThe event severity, event type, node name, license server name and event code are enclosed.")
ruckusSCGLicenseImportSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 360)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGLicenseImportSuccessTrap.setDescription("Trigger when there is license data import successfully event.\nThe event severity, event type, node name and event code are enclosed.")
ruckusSCGLicenseImportFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 361)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeName"), ))
if mibBuilder.loadTexts:
	ruckusSCGLicenseImportFailedTrap.setDescription("Trigger when there is license data import failed event.\nThe event severity, event type, node name and event code are enclosed.")
ruckusSCGSyslogServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 370)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSyslogServerAddress"), ))
if mibBuilder.loadTexts:
	ruckusSCGSyslogServerReachableTrap.setDescription("Trigger when there is a syslog server reachable event.\nThe event severity, event type, syslog server address, SCG node MAC address and event code are enclosed.")
ruckusSCGSyslogServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 371)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSyslogServerAddress"), ))
if mibBuilder.loadTexts:
	ruckusSCGSyslogServerUnreachableTrap.setDescription("Trigger when there is a syslog server unreachable event.\nThe event severity, event type, syslog server address, SCG node MAC address and event code are enclosed.")
ruckusSCGSyslogServerSwitchedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 372)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSrcSyslogServerAddress"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDestSyslogServerAddress"), ))
if mibBuilder.loadTexts:
	ruckusSCGSyslogServerSwitchedTrap.setDescription("Trigger when there is a syslog server switched event.\nThe event severity, event type, source syslog server address, destination syslog server address, SCG node MAC address and event code are enclosed.")
ruckusSCGAPRadiusServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 400)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRadSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPRadiusServerReachableTrap.setDescription("Trigger when there is an AP is able to reach radius server successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, radius server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPRadiusServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 401)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRadSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPRadiusServerUnreachableTrap.setDescription("Trigger when there is an AP is unable to reach radius server event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, radius server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPLDAPServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 402)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLDAPSrvrIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPLDAPServerReachableTrap.setDescription("Trigger when there is an AP is able to reach LDAP server successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, LDAP server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPLDAPServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 403)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLDAPSrvrIp"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPLDAPServerUnreachableTrap.setDescription("Trigger when there is an AP is unable to reach LDAP server event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, LDAP server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPADServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 404)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGADSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPADServerReachableTrap.setDescription("Trigger when there is an AP is able to reach AD server successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, AD server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPADServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 405)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGADSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPADServerUnreachableTrap.setDescription("Trigger when there is an AP is unable to reach AD server event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, AD server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGAPUsbSoftwarePackageDownloadedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 406)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSoftwareName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPUsbSoftwarePackageDownloadedTrap.setDescription("Trigger when there is an AP downloaded its USB software package successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, USB software name, event code and AP IPv6 address are enclosed.")
ruckusSCGAPUsbSoftwarePackageDownloadFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 407)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGSoftwareName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGAPUsbSoftwarePackageDownloadFailedTrap.setDescription("Trigger when there is an AP failed to download its USB software package event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, USB software name, event code and AP IPv6 address are enclosed.")
ruckusSCGEspAuthServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 408)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGAuthSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGEspAuthServerReachableTrap.setDescription("Trigger when there is an AP is able to reach WeChat ESP authentication server successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, authentication server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGEspAuthServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 409)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGAuthSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGEspAuthServerUnreachableTrap.setDescription("Trigger when there is an AP is unable to reach WeChat ESP authentication server event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, authentication server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGEspAuthServerResolvableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 410)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDomainName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGEspAuthServerResolvableTrap.setDescription("Trigger when there is an AP is able to resolve WeChat ESP authentication server domain name successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, authentication server domain name, event code and AP IPv6 address are enclosed.")
ruckusSCGEspAuthServerUnResolvableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 411)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDomainName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGEspAuthServerUnResolvableTrap.setDescription("Trigger when there is an AP is unable to resolve WeChat ESP authentication server domain name event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, authentication server domain name, event code and AP IPv6 address are enclosed.")
ruckusSCGEspDNATServerReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 412)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDNATIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGEspDNATServerReachableTrap.setDescription("Trigger when there is an AP is able to reach WeChat ESP DNAT server successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, DNAT server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGEspDNATServerUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 413)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDNATIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGEspDNATServerUnreachableTrap.setDescription("Trigger when there is an AP is unable to reach WeChat ESP DNAT server event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, DNAT server IP address, event code and AP IPv6 address are enclosed.")
ruckusSCGEspDNATServerResolvableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 414)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDomainName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGEspDNATServerResolvableTrap.setDescription("Trigger when there is an AP is able to resolve WeChat ESP DNAT server domain name successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, authentication server domain name, event code and AP IPv6 address are enclosed.")
ruckusSCGEspDNATServerUnresolvableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 415)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGDomainName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGEspDNATServerUnresolvableTrap.setDescription("Trigger when there is an AP is unable to resolve WeChat ESP DNAT server domain name event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, authentication server domain name, event code and AP IPv6 address are enclosed.")
ruckusRateLimitTORSurpassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 500)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGRadSrvrIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusRateLimitTORSurpassedTrap.setDescription("Trigger when there is received rate Limit for Total Outstanding Requests(TOR) Surpassed event.\nThe event severity, event type, AAA server IP address and event code are enclosed.")
ruckusSCGIPSecTunnelAssociatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 600)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGIPSecGWAddress"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGIPSecTunnelAssociatedTrap.setDescription("Trigger when there is an AP is able to reach secure gateway successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, secure gateway address, event code and AP IPv6 address are enclosed.")
ruckusSCGIPSecTunnelDisassociatedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 601)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGIPSecGWAddress"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGIPSecTunnelDisassociatedTrap.setDescription("Trigger when there is an AP is disconnected from secure gateway event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, secure gateway address, event code and AP IPv6 address are enclosed.")
ruckusSCGIPSecTunnelAssociateFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 602)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPDescription"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGIPSecGWAddress"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPLocation"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPGPSCoordinates"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIP"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventZoneName"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventAPIPv6"), ))
if mibBuilder.loadTexts:
	ruckusSCGIPSecTunnelAssociateFailedTrap.setDescription("Trigger when there is an AP is not able to reach secure gateway successfully event.\nThe event severity, event type, AP name, AP MAC address, AP IP address, AP location, AP description, AP GPS coordinates, zone name, secure gateway address, event code and AP IPv6 address are enclosed.")
ruckusSCGPmipProcessInitTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 700)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipProcessInitTrap.setDescription("Trigger when there is received PMIPv6 process crashed, is restarted event.\nThe event severity, event type, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipUnavailableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 701)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipUnavailableTrap.setDescription("Trigger when there is received PMIPv6 process repeatedly restarts, could not become stable event.\nThe event severity, event type, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipUnallocatedMemoryTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 702)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipUnallocatedMemoryTrap.setDescription("Trigger when there is received memory allocation failed in PMIPv6 process event.\nThe event severity, event type, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipUpdateCgfFailedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 703)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipUpdateCgfFailedTrap.setDescription("Trigger when there is received PMIPv6 failed to apply configuration event.\nThe event severity, event type, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipLMAIcmpUnreachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 704)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLMAIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipLMAIcmpUnreachableTrap.setDescription("Trigger when there is received PMIPv6 daemon cannot reach the LMA server by ICMP packet event.\nThe event severity, event type, LMA IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipLMAFailOverTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 705)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLMAIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipLMAFailOverTrap.setDescription("Trigger when there is received LMA failover event.\nThe event severity, event type, LMA IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipBindingFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 706)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipBindingFailureTrap.setDescription("Trigger when there is received MN binding failure from LMA server event.\nThe event severity, event type, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmiplostCnxnToDHCPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 707)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmiplostCnxnToDHCPTrap.setDescription("Trigger when there is received PMIPv6 process cannot connect to DHCP server event.\nThe event severity, event type, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipLMAIcmpReachableTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 708)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGLMAIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipLMAIcmpReachableTrap.setDescription("Trigger when there is received PMIPv6 daemon successfully reaches the LMA server by ICMP packet event.\nThe event severity, event type, LMA IP address, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipBindingSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 709)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipBindingSuccessTrap.setDescription("Trigger when there is received MN binding success from LMA server event.\nThe event severity, event type, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipConnectedToDHCPTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 710)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipConnectedToDHCPTrap.setDescription("Trigger when there is received PMIPv6 process successfully connects to DHCP server event.\nThe event severity, event type, SCG node MAC address, management IP address and event code are enclosed.")
ruckusSCGPmipProcessStoppedTrap = NotificationType((1, 3, 6, 1, 4, 1, 25053, 2, 10, 1, 711)).setObjects(*(("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventSeverity"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventMacAddr"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventType"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventNodeMgmtIp"), ("RUCKUS-SCG-EVENT-MIB", "ruckusSCGEventCode"), ))
if mibBuilder.loadTexts:
	ruckusSCGPmipProcessStoppedTrap.setDescription("Trigger when there is PMIPv6 process stopped event.\nThe event severity, event type, SCG node MAC address, management IP address and event code are enclosed.")

# Exports

# Module identity
mibBuilder.exportSymbols("RUCKUS-SCG-EVENT-MIB", PYSNMP_MODULE_ID=ruckusSCGEventMIB)
# Objects
mibBuilder.exportSymbols("RUCKUS-SCG-EVENT-MIB", ruckusSCGEventMIB=ruckusSCGEventMIB, ruckusSCGEventTraps=ruckusSCGEventTraps, ruckusSCGEventObjects=ruckusSCGEventObjects, ruckusSCGEventDescription=ruckusSCGEventDescription, ruckusSCGClusterName=ruckusSCGClusterName, ruckusSCGEventCode=ruckusSCGEventCode, ruckusSCGProcessName=ruckusSCGProcessName, ruckusSCGEventCtrlIP=ruckusSCGEventCtrlIP, ruckusSCGEventSeverity=ruckusSCGEventSeverity, ruckusSCGEventType=ruckusSCGEventType, ruckusSCGEventNodeMgmtIp=ruckusSCGEventNodeMgmtIp, ruckusSCGEventNodeName=ruckusSCGEventNodeName, ruckusSCGCPUPerc=ruckusSCGCPUPerc, ruckusSCGMemoryPerc=ruckusSCGMemoryPerc, ruckusSCGDiskPerc=ruckusSCGDiskPerc, ruckusSCGEventMacAddr=ruckusSCGEventMacAddr, ruckusSCGEventFirmwareVersion=ruckusSCGEventFirmwareVersion, ruckusSCGEventUpgradedFirmwareVersion=ruckusSCGEventUpgradedFirmwareVersion, ruckusSCGEventAPMacAddr=ruckusSCGEventAPMacAddr, ruckusSCGEventReason=ruckusSCGEventReason, ruckusSCGEventAPName=ruckusSCGEventAPName, ruckusSCGEventAPIP=ruckusSCGEventAPIP, ruckusSCGEventAPLocation=ruckusSCGEventAPLocation, ruckusSCGEventAPGPSCoordinates=ruckusSCGEventAPGPSCoordinates, ruckusSCGEventAPDescription=ruckusSCGEventAPDescription, ruckusSCGEventZoneName=ruckusSCGEventZoneName, ruckusSCGAPModel=ruckusSCGAPModel, ruckusSCGConfigAPModel=ruckusSCGConfigAPModel, ruckusSCGAPConfigID=ruckusSCGAPConfigID, ruckusSCGEventTargetZoneName=ruckusSCGEventTargetZoneName, ruckusSCGEventAPIPv6=ruckusSCGEventAPIPv6, ruckusSCGLBSURL=ruckusSCGLBSURL, ruckusSCGLBSPort=ruckusSCGLBSPort, ruckusSCGEventSSID=ruckusSCGEventSSID, ruckusSCGEventRogueMac=ruckusSCGEventRogueMac, ruckusPrimaryGRE=ruckusPrimaryGRE, ruckusSecondaryGRE=ruckusSecondaryGRE, ruckusSoftGREGatewayList=ruckusSoftGREGatewayList, ruckusSCGSoftGREGWAddress=ruckusSCGSoftGREGWAddress, ruckusSCGEventClientMacAddr=ruckusSCGEventClientMacAddr, ruckusSCGDPKey=ruckusSCGDPKey, ruckusSCGDPConfigID=ruckusSCGDPConfigID, ruckusSCGDPIP=ruckusSCGDPIP, ruckusSCGDPPacketPoolID=ruckusSCGDPPacketPoolID, ruckusSCGNetworkPortID=ruckusSCGNetworkPortID, ruckusSCGNetworkInterface=ruckusSCGNetworkInterface, ruckusSCGSwitchStatus=ruckusSCGSwitchStatus, ruckusSCGTemperatureStatus=ruckusSCGTemperatureStatus, ruckusSCGProcessorId=ruckusSCGProcessorId, ruckusSCGFanId=ruckusSCGFanId, ruckusSCGFanStatus=ruckusSCGFanStatus, ruckusSCGPsId=ruckusSCGPsId, ruckusSCGPsStatus=ruckusSCGPsStatus, ruckusSCGDrvId=ruckusSCGDrvId, ruckusSCGDrvStatus=ruckusSCGDrvStatus, ruckusSCGLicenseType=ruckusSCGLicenseType, ruckusSCGLicenseUsagePerc=ruckusSCGLicenseUsagePerc, ruckusSCGLicenseServerName=ruckusSCGLicenseServerName, ruckusSCGIPSecGWAddress=ruckusSCGIPSecGWAddress, ruckusSCGSyslogServerAddress=ruckusSCGSyslogServerAddress, ruckusSCGSrcSyslogServerAddress=ruckusSCGSrcSyslogServerAddress, ruckusSCGDestSyslogServerAddress=ruckusSCGDestSyslogServerAddress, ruckusSCGFtpIp=ruckusSCGFtpIp, ruckusSCGFtpPort=ruckusSCGFtpPort, ruckusSCGSrcProcess=ruckusSCGSrcProcess, ruckusSCGGgsnIp=ruckusSCGGgsnIp, ruckusSCGGtpcIp=ruckusSCGGtpcIp, ruckusSCGApn=ruckusSCGApn, ruckusSCGUEImsi=ruckusSCGUEImsi, ruckusSCGUEMsisdn=ruckusSCGUEMsisdn, ruckusSCGAuthSrvrIp=ruckusSCGAuthSrvrIp, ruckusSCGRadProxyIp=ruckusSCGRadProxyIp, ruckusSCGAccSrvrIp=ruckusSCGAccSrvrIp, ruckusSCGRealm=ruckusSCGRealm, ruckusSCGCgfSrvrIp=ruckusSCGCgfSrvrIp, ruckusSCGRadSrvrIp=ruckusSCGRadSrvrIp, ruckusSCGCipIp=ruckusSCGCipIp, ruckusSCGPointCode=ruckusSCGPointCode, ruckusSCGCongLevel=ruckusSCGCongLevel, ruckusSCGSSN=ruckusSCGSSN, ruckusSCGRoutingContext=ruckusSCGRoutingContext, ruckusSCGSrcIP=ruckusSCGSrcIP, ruckusSCGSrcPort=ruckusSCGSrcPort, ruckusSCGDestIP=ruckusSCGDestIP, ruckusSCGDestPort=ruckusSCGDestPort, ruckusSCGOperation=ruckusSCGOperation, ruckusSCGHlrInstance=ruckusSCGHlrInstance, ruckusSCGUserName=ruckusSCGUserName, ruckusSCGPgwIp=ruckusSCGPgwIp, ruckusSCGFileName=ruckusSCGFileName, ruckusSCGLDAPSrvrIp=ruckusSCGLDAPSrvrIp, ruckusSCGADSrvrIp=ruckusSCGADSrvrIp, ruckusSCGSoftwareName=ruckusSCGSoftwareName, ruckusSCGDomainName=ruckusSCGDomainName, ruckusSCGDNATIp=ruckusSCGDNATIp, ruckusSCGLMAIp=ruckusSCGLMAIp)
# Notifications
mibBuilder.exportSymbols("RUCKUS-SCG-EVENT-MIB", ruckusSCGSystemMiscEventTrap=ruckusSCGSystemMiscEventTrap, ruckusSCGUpgradeSuccessTrap=ruckusSCGUpgradeSuccessTrap, ruckusSCGUpgradeFailedTrap=ruckusSCGUpgradeFailedTrap, ruckusSCGNodeRestartedTrap=ruckusSCGNodeRestartedTrap, ruckusSCGNodeShutdownTrap=ruckusSCGNodeShutdownTrap, ruckusSCGCPUUsageThresholdExceededTrap=ruckusSCGCPUUsageThresholdExceededTrap, ruckusSCGMemoryUsageThresholdExceededTrap=ruckusSCGMemoryUsageThresholdExceededTrap, ruckusSCGDiskUsageThresholdExceededTrap=ruckusSCGDiskUsageThresholdExceededTrap, ruckusSCGLicenseUsageThresholdExceededTrap=ruckusSCGLicenseUsageThresholdExceededTrap, ruckusSCGAPMiscEventTrap=ruckusSCGAPMiscEventTrap, ruckusSCGAPConnectedTrap=ruckusSCGAPConnectedTrap, ruckusSCGAPDeletedTrap=ruckusSCGAPDeletedTrap, ruckusSCGAPDisconnectedTrap=ruckusSCGAPDisconnectedTrap, ruckusSCGAPLostHeartbeatTrap=ruckusSCGAPLostHeartbeatTrap, ruckusSCGAPRebootTrap=ruckusSCGAPRebootTrap, ruckusSCGCriticalAPConnectedTrap=ruckusSCGCriticalAPConnectedTrap, ruckusSCGCriticalAPDisconnectedTrap=ruckusSCGCriticalAPDisconnectedTrap, ruckusSCGAPRejectedTrap=ruckusSCGAPRejectedTrap, ruckusSCGAPConfUpdateFailedTrap=ruckusSCGAPConfUpdateFailedTrap, ruckusSCGAPConfUpdatedTrap=ruckusSCGAPConfUpdatedTrap, ruckusSCGAPSwapOutModelDiffTrap=ruckusSCGAPSwapOutModelDiffTrap, ruckusSCGAPPreProvisionModelDiffTrap=ruckusSCGAPPreProvisionModelDiffTrap, ruckusSCGAPDiscoveryFailTrap=ruckusSCGAPDiscoveryFailTrap, ruckusSCGAPFirmwareUpdateFailedTrap=ruckusSCGAPFirmwareUpdateFailedTrap, ruckusSCGAPFirmwareUpdatedTrap=ruckusSCGAPFirmwareUpdatedTrap, ruckusSCGAPWlanOversubscribedTrap=ruckusSCGAPWlanOversubscribedTrap, ruckusSCGAPFactoryResetTrap=ruckusSCGAPFactoryResetTrap, ruckusSCGCableModemDownTrap=ruckusSCGCableModemDownTrap, ruckusSCGCableModemRebootTrap=ruckusSCGCableModemRebootTrap, ruckusSCGAPJoinZoneFailedTrap=ruckusSCGAPJoinZoneFailedTrap, ruckusSCGAPManagedTrap=ruckusSCGAPManagedTrap, ruckusSCGCPUUsageThresholdBackToNormalTrap=ruckusSCGCPUUsageThresholdBackToNormalTrap, ruckusSCGMemoryUsageThresholdBackToNormalTrap=ruckusSCGMemoryUsageThresholdBackToNormalTrap, ruckusSCGDiskUsageThresholdBackToNormalTrap=ruckusSCGDiskUsageThresholdBackToNormalTrap, ruckusSCGCableModemUpTrap=ruckusSCGCableModemUpTrap, ruckusSCGAPDiscoverySuccessTrap=ruckusSCGAPDiscoverySuccessTrap, ruckusSCGCMResetByUserTrap=ruckusSCGCMResetByUserTrap, ruckusSCGCMResetFactoryByUserTrap=ruckusSCGCMResetFactoryByUserTrap, ruckusSCGSSIDSpoofingRogueAPDetectedTrap=ruckusSCGSSIDSpoofingRogueAPDetectedTrap, ruckusSCGMacSpoofingRogueAPDetectedTrap=ruckusSCGMacSpoofingRogueAPDetectedTrap, ruckusSCGSameNetworkRogueAPDetectedTrap=ruckusSCGSameNetworkRogueAPDetectedTrap, ruckusSCGADHocNetworkRogueAPDetectedTrap=ruckusSCGADHocNetworkRogueAPDetectedTrap, ruckusSCGMaliciousRogueAPTimeoutTrap=ruckusSCGMaliciousRogueAPTimeoutTrap, ruckusSCGAPLBSConnectSuccessTrap=ruckusSCGAPLBSConnectSuccessTrap, ruckusSCGAPLBSNoResponsesTrap=ruckusSCGAPLBSNoResponsesTrap, ruckusSCGAPLBSAuthFailedTrap=ruckusSCGAPLBSAuthFailedTrap, ruckusSCGAPLBSConnectFailedTrap=ruckusSCGAPLBSConnectFailedTrap, ruckusSCGAPTunnelBuildFailedTrap=ruckusSCGAPTunnelBuildFailedTrap, ruckusSCGAPTunnelBuildSuccessTrap=ruckusSCGAPTunnelBuildSuccessTrap, ruckusSCGAPTunnelDisconnectedTrap=ruckusSCGAPTunnelDisconnectedTrap, ruckusSCGAPSoftGRETunnelFailoverPtoSTrap=ruckusSCGAPSoftGRETunnelFailoverPtoSTrap, ruckusSCGAPSoftGRETunnelFailoverStoPTrap=ruckusSCGAPSoftGRETunnelFailoverStoPTrap, ruckusSCGAPSoftGREGatewayNotReachableTrap=ruckusSCGAPSoftGREGatewayNotReachableTrap, ruckusSCGAPSoftGREGatewayReachableTrap=ruckusSCGAPSoftGREGatewayReachableTrap, ruckusSCGDPConfUpdateFailedTrap=ruckusSCGDPConfUpdateFailedTrap, ruckusSCGDPLostHeartbeatTrap=ruckusSCGDPLostHeartbeatTrap, ruckusSCGDPDisconnectedTrap=ruckusSCGDPDisconnectedTrap, ruckusSCGDPPhyInterfaceDownTrap=ruckusSCGDPPhyInterfaceDownTrap, ruckusSCGDPStatusUpdateFailedTrap=ruckusSCGDPStatusUpdateFailedTrap, ruckusSCGDPStatisticUpdateFaliedTrap=ruckusSCGDPStatisticUpdateFaliedTrap, ruckusSCGDPConnectedTrap=ruckusSCGDPConnectedTrap, ruckusSCGDPPhyInterfaceUpTrap=ruckusSCGDPPhyInterfaceUpTrap, ruckusSCGDPConfUpdatedTrap=ruckusSCGDPConfUpdatedTrap, ruckusSCGDPTunnelTearDownTrap=ruckusSCGDPTunnelTearDownTrap, ruckusSCGDPRebootTrap=ruckusSCGDPRebootTrap, ruckusSCGDPAcceptTunnelRequestTrap=ruckusSCGDPAcceptTunnelRequestTrap, ruckusSCGDPRejectTunnelRequestTrap=ruckusSCGDPRejectTunnelRequestTrap, ruckusSCGDPSgreGWUnreachableTrap=ruckusSCGDPSgreGWUnreachableTrap, ruckusSCGDPSgreGWReachableTrap=ruckusSCGDPSgreGWReachableTrap, ruckusSCGDPTunnelSetUpTrap=ruckusSCGDPTunnelSetUpTrap, ruckusSCGDPDiscoverySuccessTrap=ruckusSCGDPDiscoverySuccessTrap, ruckusSCGDPDiscoveryFailTrap=ruckusSCGDPDiscoveryFailTrap, ruckusSCGDPSgreGWInactTrap=ruckusSCGDPSgreGWInactTrap, ruckusSCGDPSgreGWActTrap=ruckusSCGDPSgreGWActTrap, ruckusSCGDPPktPoolLowTrap=ruckusSCGDPPktPoolLowTrap, ruckusSCGDPPktPoolCriticalLowTrap=ruckusSCGDPPktPoolCriticalLowTrap, ruckusSCGDPPktPoolRecoverTrap=ruckusSCGDPPktPoolRecoverTrap, ruckusSCGDPCoreDeadTrap=ruckusSCGDPCoreDeadTrap, ruckusSCGDPDeletedTrap=ruckusSCGDPDeletedTrap, ruckusSCGDPUpgradeStartTrap=ruckusSCGDPUpgradeStartTrap, ruckusSCGDPUpgradingTrap=ruckusSCGDPUpgradingTrap, ruckusSCGDPUpgradeSuccessTrap=ruckusSCGDPUpgradeSuccessTrap, ruckusSCGDPUpgradeFailedTrap=ruckusSCGDPUpgradeFailedTrap, ruckusSCGClientMiscEventTrap=ruckusSCGClientMiscEventTrap, ruckusSCGNodeJoinFailedTrap=ruckusSCGNodeJoinFailedTrap, ruckusSCGNodeRemoveFailedTrap=ruckusSCGNodeRemoveFailedTrap, ruckusSCGNodeOutOfServiceTrap=ruckusSCGNodeOutOfServiceTrap, ruckusSCGClusterInMaintenanceStateTrap=ruckusSCGClusterInMaintenanceStateTrap, ruckusSCGClusterBackupFailedTrap=ruckusSCGClusterBackupFailedTrap, ruckusSCGClusterRestoreFailedTrap=ruckusSCGClusterRestoreFailedTrap, ruckusSCGClusterAppStoppedTrap=ruckusSCGClusterAppStoppedTrap, ruckusSCGNodeBondInterfaceDownTrap=ruckusSCGNodeBondInterfaceDownTrap, ruckusSCGNodePhyInterfaceDownTrap=ruckusSCGNodePhyInterfaceDownTrap, ruckusSCGClusterLeaderChangedTrap=ruckusSCGClusterLeaderChangedTrap, ruckusSCGClusterUpgradeSuccessTrap=ruckusSCGClusterUpgradeSuccessTrap, ruckusSCGNodeBondInterfaceUpTrap=ruckusSCGNodeBondInterfaceUpTrap, ruckusSCGNodePhyInterfaceUpTrap=ruckusSCGNodePhyInterfaceUpTrap, ruckusSCGClusterBackToInServiceTrap=ruckusSCGClusterBackToInServiceTrap, ruckusSCGBackupClusterSuccessTrap=ruckusSCGBackupClusterSuccessTrap, ruckusSCGNodeJoinSuccessTrap=ruckusSCGNodeJoinSuccessTrap, ruckusSCGClusterAppStartTrap=ruckusSCGClusterAppStartTrap, ruckusSCGNodeRemoveSuccessTrap=ruckusSCGNodeRemoveSuccessTrap, ruckusSCGClusterRestoreSuccessTrap=ruckusSCGClusterRestoreSuccessTrap, ruckusSCGNodeBackToInServiceTrap=ruckusSCGNodeBackToInServiceTrap, ruckusSCGSshTunnelSwitchedTrap=ruckusSCGSshTunnelSwitchedTrap, ruckusSCGClusterCfgBackupStartTrap=ruckusSCGClusterCfgBackupStartTrap, ruckusSCGClusterCfgBackupSuccessTrap=ruckusSCGClusterCfgBackupSuccessTrap, ruckusSCGClusterCfgBackupFailedTrap=ruckusSCGClusterCfgBackupFailedTrap, ruckusSCGClusterCfgRestoreSuccessTrap=ruckusSCGClusterCfgRestoreSuccessTrap, ruckusSCGClusterCfgRestoreFailedTrap=ruckusSCGClusterCfgRestoreFailedTrap, ruckusSCGClusterUploadSuccessTrap=ruckusSCGClusterUploadSuccessTrap, ruckusSCGClusterUploadFailedTrap=ruckusSCGClusterUploadFailedTrap, ruckusSCGClusterOutOfServiceTrap=ruckusSCGClusterOutOfServiceTrap, ruckusSCGClusterUploadVDPFirmwareStartTrap=ruckusSCGClusterUploadVDPFirmwareStartTrap, ruckusSCGClusterUploadVDPFirmwareSuccessTrap=ruckusSCGClusterUploadVDPFirmwareSuccessTrap, ruckusSCGClusterUploadVDPFirmwareFailedTrap=ruckusSCGClusterUploadVDPFirmwareFailedTrap, ruckusSCGIpmiVotageTrap=ruckusSCGIpmiVotageTrap, ruckusSCGIpmiTempBBTrap=ruckusSCGIpmiTempBBTrap, ruckusSCGIpmiTempFPTrap=ruckusSCGIpmiTempFPTrap, ruckusSCGIpmiTempIOHTrap=ruckusSCGIpmiTempIOHTrap, ruckusSCGIpmiTempMemPTrap=ruckusSCGIpmiTempMemPTrap, ruckusSCGIpmiTempPSTrap=ruckusSCGIpmiTempPSTrap, ruckusSCGIpmiTempPTrap=ruckusSCGIpmiTempPTrap, ruckusSCGIpmiTempHSBPTrap=ruckusSCGIpmiTempHSBPTrap, ruckusSCGIpmiFanTrap=ruckusSCGIpmiFanTrap, ruckusSCGIpmiPowerTrap=ruckusSCGIpmiPowerTrap)
mibBuilder.exportSymbols("RUCKUS-SCG-EVENT-MIB", ruckusSCGIpmiCurrentTrap=ruckusSCGIpmiCurrentTrap, ruckusSCGIpmiFanStatusTrap=ruckusSCGIpmiFanStatusTrap, ruckusSCGIpmiPsStatusTrap=ruckusSCGIpmiPsStatusTrap, ruckusSCGIpmiDrvStatusTrap=ruckusSCGIpmiDrvStatusTrap, ruckusSCGIpmiREVotageTrap=ruckusSCGIpmiREVotageTrap, ruckusSCGIpmiRETempBBTrap=ruckusSCGIpmiRETempBBTrap, ruckusSCGIpmiRETempFPTrap=ruckusSCGIpmiRETempFPTrap, ruckusSCGIpmiRETempIOHTrap=ruckusSCGIpmiRETempIOHTrap, ruckusSCGIpmiRETempMemPTrap=ruckusSCGIpmiRETempMemPTrap, ruckusSCGIpmiRETempPSTrap=ruckusSCGIpmiRETempPSTrap, ruckusSCGIpmiRETempPTrap=ruckusSCGIpmiRETempPTrap, ruckusSCGIpmiRETempHSBPTrap=ruckusSCGIpmiRETempHSBPTrap, ruckusSCGIpmiREFanTrap=ruckusSCGIpmiREFanTrap, ruckusSCGIpmiREPowerTrap=ruckusSCGIpmiREPowerTrap, ruckusSCGIpmiRECurrentTrap=ruckusSCGIpmiRECurrentTrap, ruckusSCGIpmiREFanStatusTrap=ruckusSCGIpmiREFanStatusTrap, ruckusSCGIpmiREPsStatusTrap=ruckusSCGIpmiREPsStatusTrap, ruckusSCGIpmiREDrvStatusTrap=ruckusSCGIpmiREDrvStatusTrap, ruckusSCGFtpTransferErrorTrap=ruckusSCGFtpTransferErrorTrap, ruckusSCGSystemLBSConnectSuccessTrap=ruckusSCGSystemLBSConnectSuccessTrap, ruckusSCGSystemLBSNoResponseTrap=ruckusSCGSystemLBSNoResponseTrap, ruckusSCGSystemLBSAuthFailedTrap=ruckusSCGSystemLBSAuthFailedTrap, ruckusSCGSystemLBSConnectFailedTrap=ruckusSCGSystemLBSConnectFailedTrap, ruckusSCGProcessRestartTrap=ruckusSCGProcessRestartTrap, ruckusSCGServiceUnavailableTrap=ruckusSCGServiceUnavailableTrap, ruckusSCGKeepAliveFailureTrap=ruckusSCGKeepAliveFailureTrap, ruckusSCGResourceUnavailableTrap=ruckusSCGResourceUnavailableTrap, ruckusSCGSmfRegFailedTrap=ruckusSCGSmfRegFailedTrap, ruckusSCGHipFailoverTrap=ruckusSCGHipFailoverTrap, ruckusSCGConfUpdFailedTrap=ruckusSCGConfUpdFailedTrap, ruckusSCGConfRcvFailedTrap=ruckusSCGConfRcvFailedTrap, ruckusSCGLostCnxnToDbladeTrap=ruckusSCGLostCnxnToDbladeTrap, ruckusSCGGgsnRestartedTrap=ruckusSCGGgsnRestartedTrap, ruckusSCGGgsnNotReachableTrap=ruckusSCGGgsnNotReachableTrap, ruckusSCGGgsnNotResolvedTrap=ruckusSCGGgsnNotResolvedTrap, ruckusSCGUnknownUETrap=ruckusSCGUnknownUETrap, ruckusSCGAuthSrvrNotReachableTrap=ruckusSCGAuthSrvrNotReachableTrap, ruckusSCGAccSrvrNotReachableTrap=ruckusSCGAccSrvrNotReachableTrap, ruckusSCGUnknownRealmTrap=ruckusSCGUnknownRealmTrap, ruckusSCGAuthFailedNonPermanentIDTrap=ruckusSCGAuthFailedNonPermanentIDTrap, ruckusSCGCnxnToCgfFailedTrap=ruckusSCGCnxnToCgfFailedTrap, ruckusSCGCdrTransferFailedTrap=ruckusSCGCdrTransferFailedTrap, ruckusSCGCdrGenerateFailedTrap=ruckusSCGCdrGenerateFailedTrap, ruckusSCGDestNotRecheableTrap=ruckusSCGDestNotRecheableTrap, ruckusSCGAppServerDownTrap=ruckusSCGAppServerDownTrap, ruckusSCGAppServerInactiveTrap=ruckusSCGAppServerInactiveTrap, ruckusSCGAssocCantStartTrap=ruckusSCGAssocCantStartTrap, ruckusSCGAssocDownTrap=ruckusSCGAssocDownTrap, ruckusSCGOutboundRoutingFailedTrap=ruckusSCGOutboundRoutingFailedTrap, ruckusSCGDidAllocationFailureTrap=ruckusSCGDidAllocationFailureTrap, ruckusSCGPdnGwUnresolvedTrap=ruckusSCGPdnGwUnresolvedTrap, ruckusSCGPdnGwVersionUnsupportedTrap=ruckusSCGPdnGwVersionUnsupportedTrap, ruckusSCGPdnGwAssociationDownTrap=ruckusSCGPdnGwAssociationDownTrap, ruckusSCGCreateSessionResponseFailedTrap=ruckusSCGCreateSessionResponseFailedTrap, ruckusSCGDecodeFailedTrap=ruckusSCGDecodeFailedTrap, ruckusSCGModifyBearerResponseFailedTrap=ruckusSCGModifyBearerResponseFailedTrap, ruckusSCGDeleteSessionResponseFailedTrap=ruckusSCGDeleteSessionResponseFailedTrap, ruckusSCGDeleteBearerRequestFailedTrap=ruckusSCGDeleteBearerRequestFailedTrap, ruckusSCGUpdateBearerRequestFailedTrap=ruckusSCGUpdateBearerRequestFailedTrap, ruckusSCGCgfServerNotConfiguredTrap=ruckusSCGCgfServerNotConfiguredTrap, ruckusSCGTtgSessionCriticalThresholdTrap=ruckusSCGTtgSessionCriticalThresholdTrap, ruckusSCGTtgSessionLicenseInsufficientTrap=ruckusSCGTtgSessionLicenseInsufficientTrap, ruckusSCGAPAcctMsgMandatoryPrmMissingTrap=ruckusSCGAPAcctMsgMandatoryPrmMissingTrap, ruckusSCGAcctUnknownRealmTrap=ruckusSCGAcctUnknownRealmTrap, ruckusSCGAPAcctMsgDecodeFailedTrap=ruckusSCGAPAcctMsgDecodeFailedTrap, ruckusSCGAPAcctRespWhileInvalidConfigTrap=ruckusSCGAPAcctRespWhileInvalidConfigTrap, ruckusSCGAPAcctMsgDropNoAcctStartMsgTrap=ruckusSCGAPAcctMsgDropNoAcctStartMsgTrap, ruckusSCGUnauthorizedCoaDmMessageDroppedTrap=ruckusSCGUnauthorizedCoaDmMessageDroppedTrap, ruckusSCGConnectedToDbladeTrap=ruckusSCGConnectedToDbladeTrap, ruckusSCGDestAvailableTrap=ruckusSCGDestAvailableTrap, ruckusSCGAppServerActiveTrap=ruckusSCGAppServerActiveTrap, ruckusSCGAssocUpTrap=ruckusSCGAssocUpTrap, ruckusSCGSessUpdatedAtDbladeTrap=ruckusSCGSessUpdatedAtDbladeTrap, ruckusSCGSessUpdateErrAtDbladeTrap=ruckusSCGSessUpdateErrAtDbladeTrap, ruckusSCGSessDeletedAtDbladeTrap=ruckusSCGSessDeletedAtDbladeTrap, ruckusSCGSessDeleteErrAtDbladeTrap=ruckusSCGSessDeleteErrAtDbladeTrap, ruckusSCGLicenseSyncSuccessTrap=ruckusSCGLicenseSyncSuccessTrap, ruckusSCGLicenseSyncFailedTrap=ruckusSCGLicenseSyncFailedTrap, ruckusSCGLicenseImportSuccessTrap=ruckusSCGLicenseImportSuccessTrap, ruckusSCGLicenseImportFailedTrap=ruckusSCGLicenseImportFailedTrap, ruckusSCGSyslogServerReachableTrap=ruckusSCGSyslogServerReachableTrap, ruckusSCGSyslogServerUnreachableTrap=ruckusSCGSyslogServerUnreachableTrap, ruckusSCGSyslogServerSwitchedTrap=ruckusSCGSyslogServerSwitchedTrap, ruckusSCGAPRadiusServerReachableTrap=ruckusSCGAPRadiusServerReachableTrap, ruckusSCGAPRadiusServerUnreachableTrap=ruckusSCGAPRadiusServerUnreachableTrap, ruckusSCGAPLDAPServerReachableTrap=ruckusSCGAPLDAPServerReachableTrap, ruckusSCGAPLDAPServerUnreachableTrap=ruckusSCGAPLDAPServerUnreachableTrap, ruckusSCGAPADServerReachableTrap=ruckusSCGAPADServerReachableTrap, ruckusSCGAPADServerUnreachableTrap=ruckusSCGAPADServerUnreachableTrap, ruckusSCGAPUsbSoftwarePackageDownloadedTrap=ruckusSCGAPUsbSoftwarePackageDownloadedTrap, ruckusSCGAPUsbSoftwarePackageDownloadFailedTrap=ruckusSCGAPUsbSoftwarePackageDownloadFailedTrap, ruckusSCGEspAuthServerReachableTrap=ruckusSCGEspAuthServerReachableTrap, ruckusSCGEspAuthServerUnreachableTrap=ruckusSCGEspAuthServerUnreachableTrap, ruckusSCGEspAuthServerResolvableTrap=ruckusSCGEspAuthServerResolvableTrap, ruckusSCGEspAuthServerUnResolvableTrap=ruckusSCGEspAuthServerUnResolvableTrap, ruckusSCGEspDNATServerReachableTrap=ruckusSCGEspDNATServerReachableTrap, ruckusSCGEspDNATServerUnreachableTrap=ruckusSCGEspDNATServerUnreachableTrap, ruckusSCGEspDNATServerResolvableTrap=ruckusSCGEspDNATServerResolvableTrap, ruckusSCGEspDNATServerUnresolvableTrap=ruckusSCGEspDNATServerUnresolvableTrap, ruckusRateLimitTORSurpassedTrap=ruckusRateLimitTORSurpassedTrap, ruckusSCGIPSecTunnelAssociatedTrap=ruckusSCGIPSecTunnelAssociatedTrap, ruckusSCGIPSecTunnelDisassociatedTrap=ruckusSCGIPSecTunnelDisassociatedTrap, ruckusSCGIPSecTunnelAssociateFailedTrap=ruckusSCGIPSecTunnelAssociateFailedTrap, ruckusSCGPmipProcessInitTrap=ruckusSCGPmipProcessInitTrap, ruckusSCGPmipUnavailableTrap=ruckusSCGPmipUnavailableTrap, ruckusSCGPmipUnallocatedMemoryTrap=ruckusSCGPmipUnallocatedMemoryTrap, ruckusSCGPmipUpdateCgfFailedTrap=ruckusSCGPmipUpdateCgfFailedTrap, ruckusSCGPmipLMAIcmpUnreachableTrap=ruckusSCGPmipLMAIcmpUnreachableTrap, ruckusSCGPmipLMAFailOverTrap=ruckusSCGPmipLMAFailOverTrap, ruckusSCGPmipBindingFailureTrap=ruckusSCGPmipBindingFailureTrap, ruckusSCGPmiplostCnxnToDHCPTrap=ruckusSCGPmiplostCnxnToDHCPTrap, ruckusSCGPmipLMAIcmpReachableTrap=ruckusSCGPmipLMAIcmpReachableTrap, ruckusSCGPmipBindingSuccessTrap=ruckusSCGPmipBindingSuccessTrap, ruckusSCGPmipConnectedToDHCPTrap=ruckusSCGPmipConnectedToDHCPTrap, ruckusSCGPmipProcessStoppedTrap=ruckusSCGPmipProcessStoppedTrap)
