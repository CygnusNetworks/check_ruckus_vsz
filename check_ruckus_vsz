#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import logging
import os
import re

import configparser
import ipaddr
import nagiosplugin
import nagiosplugin.result
import nagiosplugin.state

import ruckus_vsz_snmp
import ruckus_vsz_snmp.snmpclient

MIB_PATH = os.path.realpath(os.path.dirname(ruckus_vsz_snmp.__file__))

_log = logging.getLogger('nagiosplugin')


class RUCKUSVSZSummary(nagiosplugin.Summary):
	def ok(self, results):
		summary = '%d stations connected ' % (results['num_sta'].metric.value)
		summary += 'AP:(monitored %d, connected %d, configured %d) ' % (results['num_ap'].metric.value, results['num_ap_connected'].metric.value, results['num_ap_configured'].metric.value)
		return summary

	def problem(self, results):
		return '{0} - {1}'.format(results.first_significant, self.ok(results))


class PerformanceContext(nagiosplugin.Context):  # pylint: disable=too-few-public-methods
	def __init__(self, name, fmt_metric='{name} is {valueunit}', uom=None, result_cls=nagiosplugin.result.Result):  # pylint: disable=too-many-arguments
		self.uom = uom
		super(PerformanceContext, self).__init__(name, fmt_metric, result_cls)

	def performance(self, metric, resource):
		return nagiosplugin.performance.Performance(metric.name, metric.value, uom=self.uom)

	def evaluate(self, metric, resource):
		return self.result_cls(nagiosplugin.state.Ok, None, metric)


class BoolContext(nagiosplugin.Context):  # pylint: disable=too-few-public-methods
	def __init__(self, name, ok_text=None, crit_text=None, fmt_metric='{name} is {valueunit}', result_cls=nagiosplugin.result.Result):  # pylint: disable=too-many-arguments
		self.ok_text = ok_text
		self.crit_text = crit_text
		super(BoolContext, self).__init__(name, fmt_metric, result_cls)

	def evaluate(self, metric, resource):
		if metric.value:
			return self.result_cls(nagiosplugin.state.Ok, self.ok_text, metric)
		else:
			return self.result_cls(nagiosplugin.state.Critical, self.crit_text, metric)


class BoolContextWarning(BoolContext):  # pylint: disable=too-few-public-methods
	def __init__(self, name, ok_text=None, warn_text=None, fmt_metric='{name} is {valueunit}', result_cls=nagiosplugin.result.Result):  # pylint: disable=too-many-arguments
		self.ok_text = ok_text
		self.warn_text = warn_text
		super(BoolContextWarning, self).__init__(name, fmt_metric, result_cls)

	def evaluate(self, metric, resource):
		if metric.value:
			return self.result_cls(nagiosplugin.state.Ok, self.ok_text, metric)
		else:
			return self.result_cls(nagiosplugin.state.Warn, self.warn_text, metric)


class SNMPContext(nagiosplugin.Context):  # pylint: disable=too-few-public-methods
	def evaluate(self, metric, resource):
		if metric.value["status"]:
			return self.result_cls(nagiosplugin.state.Ok, None, metric)
		else:
			return self.result_cls(nagiosplugin.state.Critical, "Unreachable - %s" % metric.value["error_indication"], metric)


class RUCKUSVSZ(nagiosplugin.Resource):  # pylint: disable=too-few-public-methods
	def __init__(self, args, config_parser):
		self.args = args
		self.config_parser = config_parser
		ruckus_vsz_snmp.snmpclient.add_mib_path(MIB_PATH)
		self.snmpclient = None

	def probe(self):  # pylint: disable=too-many-locals
		_log.debug("Probing Ruckus SCG device %s through SNMP", self.args.host)
		self.snmpclient = ruckus_vsz_snmp.snmpclient.SnmpClient(self.args.host, ruckus_vsz_snmp.snmpclient.snmp_auth_data_v2c(community=self.args.community), timeout=self.args.snmp_timeout, retries=self.args.retries)

		if not self.snmpclient.alive:
			_log.warn("Device is not reachable through SNMP with error %s", self.snmpclient.error_status)
			yield nagiosplugin.Metric('reachable', dict(status=self.snmpclient.alive, error_indication=self.snmpclient.error_indication, error_status=self.snmpclient.error_status, error_varbinds=self.snmpclient.error_varbinds))
			return

		_log.debug("Queried Ruckus SCG device %s through SNMP - device is reachable", self.args.host)
		yield nagiosplugin.Metric('reachable', dict(status=True))
		_log.debug("Found Sysname %s and sysdescr %s", self.snmpclient.sysname, self.snmpclient.sysdescr)

		if not str(self.snmpclient.sysdescr).startswith("SmartCell Gateway"):
			raise nagiosplugin.CheckError("Device is not a Ruckus SCG device - System description is %s" % self.snmpclient.sysdescr)

		_log.debug("Starting SNMP polling of host %s", self.args.host)

		sysuptime = self.snmpclient.get("SNMPv2-MIB::sysUpTime.0")
		yield nagiosplugin.Metric("sysuptime", int(sysuptime.get_value() / 100 / 60))

		# stats rx
		stats_rx_pkts = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalRxPkts.0").get_value()
		_log.debug("Device %s number of received packets is %d", self.args.host, stats_rx_pkts)
		yield nagiosplugin.Metric('stats_rx_pkts', stats_rx_pkts)

		stats_rx_bytes = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalRxBytes.0").get_value()
		_log.debug("Device %s number of received bytes is %d", self.args.host, stats_rx_bytes)
		yield nagiosplugin.Metric('stats_rx_bytes', stats_rx_bytes)

		stats_rx_multicast = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalRxMulticast.0").get_value()
		_log.debug("Device %s number of received multicast packets is %d", self.args.host, stats_rx_multicast)
		yield nagiosplugin.Metric('stats_rx_multicast', stats_rx_multicast)

		# stats tx
		stats_tx_pkts = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxPkts.0").get_value()
		_log.debug("Device %s number of sent packets is %d", self.args.host, stats_tx_pkts)
		yield nagiosplugin.Metric('stats_tx_pkts', stats_tx_pkts)

		stats_tx_bytes = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxBytes.0").get_value()
		_log.debug("Device %s number of sent bytes is %d", self.args.host, stats_tx_bytes)
		yield nagiosplugin.Metric('stats_tx_bytes', stats_tx_bytes)

		stats_tx_multicast = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxMulticast.0").get_value()
		_log.debug("Device %s number of sent multicast packets is %d", self.args.host, stats_tx_multicast)
		yield nagiosplugin.Metric('stats_tx_multicast', stats_tx_multicast)

		stats_tx_fail = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxFail.0").get_value()
		_log.debug("Device %s number of packets failed to transmit is %d", self.args.host, stats_tx_fail)
		yield nagiosplugin.Metric('stats_tx_fail', stats_tx_fail)

		stats_tx_retry = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxRetry.0").get_value()
		_log.debug("Device %s number of packets retried to transmit is %d", self.args.host, stats_tx_retry)
		yield nagiosplugin.Metric('stats_tx_retry', stats_tx_retry)

		# aps
		scgaptable_varbinds = self.snmpclient.gettable("RUCKUS-SCG-WLAN-MIB::ruckusSCGAPTable")
		scgaptable = scgaptable_varbinds.get_json_name()
		scgapmac_prefix = 'RUCKUS-SCG-WLAN-MIB::ruckusSCGAPMac.'
		scgapmacs = list(x[len(scgapmac_prefix):] for x in scgaptable.keys() if x.startswith(scgapmac_prefix))
		num_ap_connected = 0
		num_ap_configured = 0
		num_ap = 0
		num_sta = 0
		for scgapmac in scgapmacs:
			scgap_mac_parts = list(hex(ord(x))[2:].upper().rjust(2, '0') for x in scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPMac.%s' % scgapmac])
			scgap_mac = ':'.join(scgap_mac_parts)

			scgap_regstatus = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPRegStatus.%s' % scgapmac]
			_log.debug("Device %s AP %s registration status is %s", self.args.host, scgap_mac, scgap_regstatus)
			if not scgap_regstatus == 'Approved':
				_log.debug("Device %s AP %s is not approved, ignoring.", self.args.host, scgap_mac)
				continue

			scgap_zone = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPZone.%s' % scgapmac]
			_log.debug("Device %s AP %s zone is %s", self.args.host, scgap_mac, scgap_zone)
			if not re.match(self.config_parser.get(self.args.host, 'scgap_zone_regex'), scgap_zone):
				_log.debug("Device %s AP %s is in unmonitored zone, ignoring.", self.args.host, scgap_mac)
				continue

			scgap_group = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPGroup.%s' % scgapmac]
			_log.debug("Device %s AP %s group is %s", self.args.host, scgap_mac, scgap_group)
			if not re.match(self.config_parser.get(self.args.host, 'scgap_group_regex'), scgap_group):
				_log.debug("Device %s AP %s is in unmonitored group, ignoring.", self.args.host, scgap_mac)
				continue

			num_ap += 1

			scgap_ipv6addr = str(ipaddr.IPv6Address(ipaddr.Bytes(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIPV6Addr.%s' % scgapmac])))
			_log.debug("Device %s AP %s ipv6 address is %s", self.args.host, scgap_mac, scgap_ipv6addr)

			scgap_ip = str(ipaddr.IPv4Address(ipaddr.Bytes(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIp.%s' % scgapmac])))
			_log.debug("Device %s AP %s ip address is %s", self.args.host, scgap_mac, scgap_ip)

			scgap_extip = str(ipaddr.IPv4Address(ipaddr.Bytes(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPExtIp.%s' % scgapmac])))
			_log.debug("Device %s AP %s external ip address %s", self.args.host, scgap_mac, scgap_extip)

			scgap_hostname = self.config_parser.get(self.args.host, 'scgap_hostname_format').format(ip=scgap_ip, ipv6=scgap_ipv6addr, extip=scgap_extip, mac=scgap_mac_parts)
			_log.debug("Device %s AP %s (generated) hostname is %s", self.args.host, scgap_mac, scgap_hostname)

			scgap_connstatus = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPConnStatus.%s' % scgapmac]
			_log.debug("Device %s AP %s connection status is %s", self.args.host, scgap_mac, scgap_connstatus)
			if scgap_connstatus == 'Connect':
				num_ap_connected += 1

			scgap_num_sta = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPNumSta.%s' % scgapmac]
			_log.debug("Device %s AP %s number of connected stations is %s", self.args.host, scgap_mac, scgap_num_sta)
			if scgap_connstatus == 'Connect':
				num_sta += scgap_num_sta

			scgap_configstatus = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPConfigStatus.%s' % scgapmac]
			_log.debug("Device %s AP %s config status is %s", self.args.host, scgap_mac, scgap_configstatus)
			if scgap_connstatus == 'Connect' and scgap_configstatus == 'Up-to-date':
				num_ap_configured += 1

			if self.args.confdir and os.path.isdir(self.args.confdir):
				with open(os.path.join(self.args.confdir, "ruckus-ap-%s.cfg" % scgap_mac.replace(':', '_')), "w") as conf:
					conf.write("define host {\n")
					conf.write("\tuse generic-host\n")
					conf.write("\thost_name %s\n" % scgap_hostname)
					conf.write("\talias %s\n" % scgap_hostname)
					conf.write("\taddress %s\n" % self.args.host)
					conf.write("}\n")
					conf.write("\n")
					conf.write("define service {\n")
					conf.write("\thost_name %s\n" % scgap_hostname)
					conf.write("\tservice_description check_ruckus_ap\n")
					conf.write("\tuse generic-service\n")
					conf.write("\taction_url /pnp4nagios/index.php/graph?host=$HOSTNAME$&srv=$SERVICEDESC$\n")
					conf.write("\tcheck_command check_ruckus_ap!%s!%s\n" % (self.args.community, scgap_mac))
					conf.write("}\n")

		yield nagiosplugin.Metric('num_ap', num_ap)
		yield nagiosplugin.Metric('num_sta', num_sta)
		yield nagiosplugin.Metric('num_ap_configured', num_ap_configured)
		yield nagiosplugin.Metric('num_ap_connected', num_ap_connected)


@nagiosplugin.guarded
def main():
	argp = argparse.ArgumentParser()
	argp.add_argument('-v', '--verbose', action='count', default=0)
	argp.add_argument('-c', '--config', help='config file', default='/etc/check_ruckus_vsz.conf')
	argp.add_argument('-C', '--community', help='SNMP Community', default='public')
	argp.add_argument('-H', '--host', help='Hostname or network address to check', required=True)
	argp.add_argument('-t', '--timeout', help='Check timeout', type=int, default=30)
	argp.add_argument('-s', '--snmp-timeout', help='SNMP timeout', dest='snmp_timeout', type=int, default=2)
	argp.add_argument('-r', '--retries', help='SNMP retries', type=int, default=3)
	argp.add_argument('-o', '--confdir', help='AP check config directory', default=None)
	argp.add_argument('-u', '--uptime', help='Uptime limit in minutes to create warning', type=int, default=120)
	args = argp.parse_args()

	device_defaults = dict(
		scgap_hostname_format="{ip}",
		scgap_zone_regex=".*",
		scgap_group_regex=".*",
	)
	config_defaults = {'general': {}, args.host: device_defaults}

	config_parser = configparser.ConfigParser(config_defaults)
	config_parser.read(args.config)

	if args.host not in config_parser.sections():
		config_parser.add_section(args.host)

	for key, value in device_defaults.items():
		if not config_parser.has_option(args.host, key):
			config_parser.set(args.host, key, str(value))

	check = nagiosplugin.Check(RUCKUSVSZ(args, config_parser))
	check.add(SNMPContext('reachable'))

	check.add(PerformanceContext('num_ap'))
	check.add(PerformanceContext('num_sta'))
	check.add(PerformanceContext('num_ap_connected'))
	check.add(PerformanceContext('num_ap_configured'))

	check.add(PerformanceContext('stats_rx_pkts', uom='c'))
	check.add(PerformanceContext('stats_rx_bytes', uom='c'))
	check.add(PerformanceContext('stats_rx_multicast', uom='c'))

	check.add(PerformanceContext('stats_tx_pkts', uom='c'))
	check.add(PerformanceContext('stats_tx_bytes', uom='c'))
	check.add(PerformanceContext('stats_tx_multicast', uom='c'))
	check.add(PerformanceContext('stats_tx_fail', uom='c'))
	check.add(PerformanceContext('stats_tx_retry', uom='c'))

	check.add(nagiosplugin.ScalarContext('sysuptime', warning='@%i:%i' % (0, args.uptime)))

	check.add(RUCKUSVSZSummary())

	check.main(args.verbose, timeout=args.timeout)

if __name__ == "__main__":
	main()
