#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import logging
import os
import re
import socket
import sys

import configparser
import ipaddress
import nagiosplugin
import nagiosplugin.result
import nagiosplugin.state

import ruckus_vsz_snmp
import ruckus_vsz_snmp.snmpclient

MIB_PATH = os.path.realpath(os.path.dirname(ruckus_vsz_snmp.__file__))

_log = logging.getLogger('nagiosplugin')


class RUCKUSVSZSummary(nagiosplugin.Summary):
	def ok(self, results):
		if 'error_status' in results['reachable'].metric.value:
			summary = 'Device is not reachable through SNMP with error %s' % results['reachable'].metric.value['error_status']
		else:
			try:
				summary = '%d stations connected ' % results['num_sta'].metric.value
				summary += 'AP:(monitored %d, connected %d, configured %d) ' % (results['num_ap'].metric.value, results['num_ap_connected'].metric.value, results['num_ap_configured'].metric.value)
				summary += 'DISK:(free %.1f / %.1f GB -- %.1f%%) ' % (results['data_free'].metric.value, results['data_size'].metric.value, results['data_free_percent'].metric.value)
				summary += 'MEM:(free %.1f / %.1f GB -- %.1f%%) ' % (results['mem_free'].metric.value, results['mem_size'].metric.value, results['mem_free_percent'].metric.value)
				summary += 'LOAD:(1min %.2f, 5min %.2f, 15min %.2f) ' % (results['load_1min'].metric.value, results['load_5min'].metric.value, results['load_15min'].metric.value)
			except KeyError as _:
				summary = "No data available"

		return summary

	def problem(self, results):
		return '{0} - {1}'.format(results.first_significant, self.ok(results))


class PerformanceContext(nagiosplugin.Context):  # pylint: disable=too-few-public-methods
	def __init__(self, name, fmt_metric='{name} is {valueunit}', uom=None, result_cls=nagiosplugin.result.Result):  # pylint: disable=too-many-arguments
		self.uom = uom
		super(PerformanceContext, self).__init__(name, fmt_metric, result_cls)

	def performance(self, metric, resource):
		return nagiosplugin.performance.Performance(metric.name, metric.value, uom=self.uom)

	def evaluate(self, metric, resource):
		return self.result_cls(nagiosplugin.state.Ok, None, metric)


class BoolContext(nagiosplugin.Context):  # pylint: disable=too-few-public-methods
	def __init__(self, name, ok_text=None, crit_text=None, fmt_metric='{name} is {valueunit}', result_cls=nagiosplugin.result.Result):  # pylint: disable=too-many-arguments
		self.ok_text = ok_text
		self.crit_text = crit_text
		super(BoolContext, self).__init__(name, fmt_metric, result_cls)

	def evaluate(self, metric, resource):
		if metric.value:
			return self.result_cls(nagiosplugin.state.Ok, self.ok_text, metric)
		return self.result_cls(nagiosplugin.state.Critical, self.crit_text, metric)


class BoolContextWarning(BoolContext):  # pylint: disable=too-few-public-methods
	def __init__(self, name, ok_text=None, warn_text=None, fmt_metric='{name} is {valueunit}', result_cls=nagiosplugin.result.Result):  # pylint: disable=too-many-arguments
		self.ok_text = ok_text
		self.warn_text = warn_text
		super(BoolContextWarning, self).__init__(name, fmt_metric, result_cls)

	def evaluate(self, metric, resource):
		if metric.value:
			return self.result_cls(nagiosplugin.state.Ok, self.ok_text, metric)
		return self.result_cls(nagiosplugin.state.Warn, self.warn_text, metric)


class SNMPContext(nagiosplugin.Context):  # pylint: disable=too-few-public-methods
	def evaluate(self, metric, resource):
		if metric.value["status"]:
			return self.result_cls(nagiosplugin.state.Ok, None, metric)
		return self.result_cls(nagiosplugin.state.Critical, "Unreachable - %s" % metric.value["error_indication"], metric)


class RUCKUSVSZ(nagiosplugin.Resource):  # pylint: disable=too-few-public-methods
	def __init__(self, args, config_parser):
		self.args = args
		self.config_parser = config_parser
		ruckus_vsz_snmp.snmpclient.add_mib_path(MIB_PATH)
		self.snmpclient = None

	def probe(self):  # pylint: disable=too-many-locals
		_log.debug("Probing Ruckus SCG device %s through SNMP", self.args.host)
		self.snmpclient = ruckus_vsz_snmp.snmpclient.SnmpClient(self.args.host, ruckus_vsz_snmp.snmpclient.snmp_auth_data_v2c(community=self.args.community), timeout=self.args.snmp_timeout, retries=self.args.retries)

		if not self.snmpclient.alive:
			_log.warning("Device is not reachable through SNMP with error %s", self.snmpclient.error_status)
			yield nagiosplugin.Metric('reachable', dict(status=self.snmpclient.alive, error_indication=self.snmpclient.error_indication, error_status=self.snmpclient.error_status, error_varbinds=self.snmpclient.error_varbinds))
			return

		_log.debug("Queried Ruckus SCG device %s through SNMP - device is reachable", self.args.host)
		yield nagiosplugin.Metric('reachable', dict(status=True))
		_log.debug("Found Sysname %s and sysdescr %s", self.snmpclient.sysname, self.snmpclient.sysdescr)

		if not str(self.snmpclient.sysdescr) in ["SmartCell Gateway", "SmartZone"]:
			raise nagiosplugin.CheckError("Device is not a Ruckus SmartCell Gateway/SmartZone device - System description is %s" % self.snmpclient.sysdescr)

		if self.args.output_dir is None:
			_log.debug("Starting SNMP polling of host %s", self.args.host)

			sysuptime = self.snmpclient.get("SNMPv2-MIB::sysUpTime.0")
			yield nagiosplugin.Metric("sysuptime", int(sysuptime.get_value() / 100 / 60))

			# stats rx
			stats_rx_pkts = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalRxPkts.0").get_value()
			_log.debug("Device %s number of received packets is %d", self.args.host, stats_rx_pkts)
			if stats_rx_pkts is not None:
				yield nagiosplugin.Metric('stats_rx_pkts', stats_rx_pkts)

			stats_rx_bytes = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalRxBytes.0").get_value()
			_log.debug("Device %s number of received bytes is %d", self.args.host, stats_rx_bytes)
			if stats_rx_bytes is not None:
				yield nagiosplugin.Metric('stats_rx_bytes', stats_rx_bytes)

			stats_rx_multicast = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalRxMulticast.0").get_value()
			_log.debug("Device %s number of received multicast packets is %d", self.args.host, stats_rx_multicast)
			if stats_rx_multicast is not None:
				yield nagiosplugin.Metric('stats_rx_multicast', stats_rx_multicast)

			# stats tx
			stats_tx_pkts = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxPkts.0").get_value()
			_log.debug("Device %s number of sent packets is %d", self.args.host, stats_tx_pkts)
			if stats_tx_pkts is not None:
				yield nagiosplugin.Metric('stats_tx_pkts', stats_tx_pkts)

			stats_tx_bytes = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxBytes.0").get_value()
			_log.debug("Device %s number of sent bytes is %d", self.args.host, stats_tx_bytes)
			if stats_tx_bytes is not None:
				yield nagiosplugin.Metric('stats_tx_bytes', stats_tx_bytes)

			stats_tx_multicast = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxMulticast.0").get_value()
			_log.debug("Device %s number of sent multicast packets is %d", self.args.host, stats_tx_multicast)
			if stats_tx_multicast is not None:
				yield nagiosplugin.Metric('stats_tx_multicast', stats_tx_multicast)

			stats_tx_fail = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxFail.0").get_value()
			_log.debug("Device %s number of packets failed to transmit is %d", self.args.host, stats_tx_fail)
			if stats_tx_fail is not None:
				yield nagiosplugin.Metric('stats_tx_fail', stats_tx_fail)

			stats_tx_retry = self.snmpclient.get("RUCKUS-SCG-SYSTEM-MIB::ruckusSystemStatsWLANTotalTxRetry.0").get_value()
			_log.debug("Device %s number of packets retried to transmit is %d", self.args.host, stats_tx_retry)
			if stats_tx_retry is not None:
				yield nagiosplugin.Metric('stats_tx_retry', stats_tx_retry)

			# load
			load_1min = float(str(self.snmpclient.get("UCD-SNMP-MIB::laLoad.1").get_value()))
			load_5min = float(str(self.snmpclient.get("UCD-SNMP-MIB::laLoad.2").get_value()))
			load_15min = float(str(self.snmpclient.get("UCD-SNMP-MIB::laLoad.3").get_value()))
			_log.debug("Device %s load is %.2f, %.2f, %.2f", self.args.host, load_1min, load_5min, load_15min)
			yield nagiosplugin.Metric('load_1min', load_1min)
			yield nagiosplugin.Metric('load_5min', load_5min)
			yield nagiosplugin.Metric('load_15min', load_15min)

			# storage
			hrstoragetable_varbinds = self.snmpclient.gettable("HOST-RESOURCES-MIB::hrStorageTable")
			hrstoragetable = hrstoragetable_varbinds.get_json_name()
			hrstorage_descr_prefix = 'HOST-RESOURCES-MIB::hrStorageDescr.'
			hrstorageids = list(x[len(hrstorage_descr_prefix):] for x in hrstoragetable if x.startswith(hrstorage_descr_prefix))
			data_size = 'U'
			data_free = 'U'
			phys_mem_size = 'U'
			phys_mem_used = 'U'
			buff_mem_used = 'U'
			cache_mem_used = 'U'
			mem_free = 'U'
			for hrstorageid in hrstorageids:
				hrstoragedescr = hrstoragetable['HOST-RESOURCES-MIB::hrStorageDescr.%s' % hrstorageid]
				if hrstoragedescr == '/data':
					data_units = hrstoragetable['HOST-RESOURCES-MIB::hrStorageAllocationUnits.%s' % hrstorageid]
					data_size = float(hrstoragetable['HOST-RESOURCES-MIB::hrStorageSize.%s' % hrstorageid] * data_units) / pow(1024, 3)
					data_used = float(hrstoragetable['HOST-RESOURCES-MIB::hrStorageUsed.%s' % hrstorageid] * data_units) / pow(1024, 3)
					data_free = data_size - data_used
				elif hrstoragedescr == 'Physical memory':
					phys_mem_units = hrstoragetable['HOST-RESOURCES-MIB::hrStorageAllocationUnits.%s' % hrstorageid]
					phys_mem_size = float(hrstoragetable['HOST-RESOURCES-MIB::hrStorageSize.%s' % hrstorageid] * phys_mem_units) / pow(1024, 3)
					phys_mem_used = float(hrstoragetable['HOST-RESOURCES-MIB::hrStorageUsed.%s' % hrstorageid] * phys_mem_units) / pow(1024, 3)
				elif hrstoragedescr == 'Memory buffers':
					buff_mem_units = hrstoragetable['HOST-RESOURCES-MIB::hrStorageAllocationUnits.%s' % hrstorageid]
					buff_mem_used = float(hrstoragetable['HOST-RESOURCES-MIB::hrStorageUsed.%s' % hrstorageid] * buff_mem_units) / pow(1024, 3)
				elif hrstoragedescr == 'Cached memory':
					cache_mem_units = hrstoragetable['HOST-RESOURCES-MIB::hrStorageAllocationUnits.%s' % hrstorageid]
					cache_mem_used = float(hrstoragetable['HOST-RESOURCES-MIB::hrStorageUsed.%s' % hrstorageid] * cache_mem_units) / pow(1024, 3)

			if 'U' not in [phys_mem_size, phys_mem_used, buff_mem_used, cache_mem_used]:
				mem_free = phys_mem_size - phys_mem_used + buff_mem_used + cache_mem_used

			yield nagiosplugin.Metric('data_size', data_size)
			yield nagiosplugin.Metric('data_free', data_free)
			yield nagiosplugin.Metric('data_free_percent', 'U' if data_size == 'U' else ((data_free / data_size) * 100.0))
			yield nagiosplugin.Metric('mem_size', phys_mem_size)
			yield nagiosplugin.Metric('mem_free', mem_free)
			yield nagiosplugin.Metric('mem_free_percent', 'U' if phys_mem_size == 'U' else ((mem_free / phys_mem_size) * 100.0))

		# aps
		# _log.debug("Querying SCGAPTable")
		scgaptable_varbinds = self.snmpclient.gettable("RUCKUS-SCG-WLAN-MIB::ruckusSCGAPTable")
		scgaptable = scgaptable_varbinds.get_json_name()
		for e in scgaptable:
			_log.debug("SCGAPTable: %s = %s", e, scgaptable[e])

		scgapmac_prefix = 'RUCKUS-SCG-WLAN-MIB::ruckusSCGAPMac.'
		scgapmacs = list(x[len(scgapmac_prefix):] for x in scgaptable if x.startswith(scgapmac_prefix))
		_log.debug("scgapmacs is %s", scgapmacs)

		num_ap_connected = 0
		num_ap_configured = 0
		num_ap = 0
		num_sta = 0
		for mac_numeric in scgapmacs:
			_log.debug("Parsing access point with numeric mac %s", mac_numeric)
			scgap_name = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPName.%s' % mac_numeric]
			scgap_name = re.sub(r'[\s_]', '-', scgap_name)  # whitespace / _ -> -
			scgap_name = re.sub(r'[^A-Za-z0-9-]', '', scgap_name)  # only allow certain characters in hostname
			scgap_model = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPModel.%s' % mac_numeric]

			scgap_mac_bytes = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPMac.%s' % mac_numeric]
			scgap_mac_parts = list("%02X" % ord(x) for x in scgap_mac_bytes)
			scgap_mac = ':'.join(scgap_mac_parts)
			_log.debug("Parsing access point with mac %s name %s model %s", scgap_mac, scgap_name, scgap_model)

			if self.args.output_dir is None:
				scgap_regstatus = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPRegStatus.%s' % mac_numeric]
				_log.debug("Device %s AP %s registration status is %s", self.args.host, scgap_mac, scgap_regstatus)
				if not scgap_regstatus == 'Approved':
					_log.debug("Device %s AP %s is not approved, ignoring.", self.args.host, scgap_mac)
					continue

				scgap_zone = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPZone.%s' % mac_numeric]
				_log.debug("Device %s AP %s zone is %s", self.args.host, scgap_mac, scgap_zone)
				if not re.match(self.config_parser.get(self.args.host, 'zone_regex'), scgap_zone):
					_log.debug("Device %s AP %s is in unmonitored zone, ignoring.", self.args.host, scgap_mac)
					continue

				scgap_group = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPGroup.%s' % mac_numeric]
				_log.debug("Device %s AP %s group is %s", self.args.host, scgap_mac, scgap_group)
				if not re.match(self.config_parser.get(self.args.host, 'group_regex'), scgap_group):
					_log.debug("Device %s AP %s is in unmonitored group, ignoring.", self.args.host, scgap_mac)
					continue

				num_ap += 1

			_log.debug("Parsing ips for Access Point name % model %s mac ", scgap_name, scgap_model, scgap_mac)
			scgap_ipv6addr = None
			try:
				if sys.version_info.major >= 3:  # different behaviour for different python and ipaddress module versions...
					if len(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIPV6Addr.%s' % mac_numeric]):
						scgap_ipv6addr = ipaddress.IPv6Address(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIPV6Addr.%s' % mac_numeric].encode('ascii'))
					scgap_ip = ipaddress.IPv4Address(".".join(str(ord(x)) for x in scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIp.%s' % mac_numeric]))
					scgap_extip = ipaddress.IPv4Address(".".join(str(ord(x)) for x in scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPExtIp.%s' % mac_numeric]))
				# there are two diffent ipaddress implementations present for Python 2.x, which result in different behaviour
				elif isinstance(ipaddress.ip_network('123.123.123.0/24'), ipaddress.IPv4Network):
					if len(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIPV6Addr.%s' % mac_numeric]):
						scgap_ipv6addr = ipaddress.IPv6Address(bytearray(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIPV6Addr.%s' % mac_numeric]))
					scgap_ip = ipaddress.IPv4Address(bytearray(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIp.%s' % mac_numeric]))
					scgap_extip = ipaddress.IPv4Address(bytearray(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPExtIp.%s' % mac_numeric]))
				else:
					if len(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIPV6Addr.%s' % mac_numeric]):
						scgap_ipv6addr = ipaddress.IPv6Address(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIPV6Addr.%s' % mac_numeric])
					scgap_ip = ipaddress.IPv4Address(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPIp.%s' % mac_numeric])
					scgap_extip = ipaddress.IPv4Address(scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPExtIp.%s' % mac_numeric])
			except Exception as e:
				_log.debug("Caught exception on parsing ips %s - skipping ap %s", e, scgap_mac, exc_info=True)
				continue
			scgap_hostname = self.args.hostname_format.format(ip=scgap_ip, extip=scgap_extip, mac=scgap_mac_parts, name=scgap_name, model=scgap_model.lower(), domain=self.args.domain).lower()

			if self.args.output_dir is None:
				_log.debug("Device %s AP %s ipv6 address is %s", self.args.host, scgap_mac, scgap_ipv6addr)
				_log.debug("Device %s AP %s ip address is %s", self.args.host, scgap_mac, scgap_ip)
				_log.debug("Device %s AP %s external ip address %s", self.args.host, scgap_mac, scgap_extip)
				_log.debug("Device %s AP %s (generated) hostname is %s", self.args.host, scgap_mac, scgap_hostname)

				scgap_connstatus = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPConnStatus.%s' % mac_numeric]
				_log.debug("Device %s AP %s connection status is %s", self.args.host, scgap_mac, scgap_connstatus)
				if scgap_connstatus == 'Connect':
					num_ap_connected += 1

				scgap_num_sta = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPNumSta.%s' % mac_numeric]
				_log.debug("Device %s AP %s number of connected stations is %s", self.args.host, scgap_mac, scgap_num_sta)
				if scgap_connstatus == 'Connect':
					num_sta += scgap_num_sta

				scgap_configstatus = scgaptable['RUCKUS-SCG-WLAN-MIB::ruckusSCGAPConfigStatus.%s' % mac_numeric]
				_log.debug("Device %s AP %s config status is %s", self.args.host, scgap_mac, scgap_configstatus)
				if scgap_connstatus == 'Connect' and scgap_configstatus == 'Up-to-date':
					num_ap_configured += 1
			else:
				host_config = os.path.join(self.args.output_dir, "host-ruckus-ap-%s.cfg" % scgap_mac.replace(':', '_'))
				with open(host_config, "w") as conf:
					print("Creating Nagios host config file %s" % host_config)
					conf.write("define host {\n")
					conf.write("\tuse\t\t%s\n" % self.args.host_template)
					conf.write("\thost_name\t%s\n" % scgap_hostname)
					conf.write("\talias\t\t%s\n" % scgap_hostname)
					conf.write("\taddress\t\t%s\n" % self.args.host)
					conf.write("}\n")
					conf.write("\n")
				service_config = os.path.join(self.args.output_dir, "service-ruckus-ap-%s.cfg" % scgap_mac.replace(':', '_'))
				with open(service_config, "w") as conf:
					print("Creating Nagios service config file %s" % service_config)
					conf.write("define service {\n")
					conf.write("\tuse\t\t\t%s\n" % self.args.service_template)
					conf.write("\thost_name\t\t%s\n" % scgap_hostname)
					conf.write("\tservice_description\tcheck_ruckus_ap\n")
					conf.write("\tcheck_command\t\tcheck_ruckus_ap!%s!%s\n" % (self.args.community, scgap_mac))
					conf.write("}\n")
					conf.write("\n")

		if self.args.output_dir is None:
			yield nagiosplugin.Metric('num_ap', num_ap)
			yield nagiosplugin.Metric('num_sta', num_sta)
			yield nagiosplugin.Metric('num_ap_configured', num_ap_configured)
			yield nagiosplugin.Metric('num_ap_connected', num_ap_connected)


@nagiosplugin.guarded
def main():
	fqdn = socket.getfqdn()
	if fqdn and isinstance(fqdn, str) and "." in fqdn:
		default_domain = fqdn.split('.', 1)[1]
	else:
		default_domain = "local"

	argp = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	argp.add_argument('-v', '--verbose', action='count', default=0)
	argp.add_argument('-c', '--config', help='config file', default='/etc/check_ruckus_vsz.conf')
	argp.add_argument('-C', '--community', help='SNMP Community', default='public')
	argp.add_argument('-H', '--host', help='Hostname or network address to check', required=True)
	argp.add_argument('-t', '--timeout', help='Check timeout in seconds', type=int, default=30)
	argp.add_argument('-s', '--snmp-timeout', help='SNMP timeout in seconds', type=int, default=5)
	argp.add_argument('-r', '--retries', help='SNMP retries', type=int, default=3)
	argp.add_argument('-o', '--output-dir', help='AP check config directory for creating nagios configs for access points', default=None)
	argp.add_argument('--host-template', help='Nagios host template', default='generic-host')
	argp.add_argument('--service-template', help='Nagios service template', default='generic-service-perfdata')
	argp.add_argument('--hostname-format', help='Nagios hostname format', default='ruckus-{model}-{name}.{domain}')
	argp.add_argument('--domain', help='Domain name for Nagios hostnames', default=default_domain)
	argp.add_argument('-u', '--uptime', help='Uptime limit in minutes to create warning', type=int, default=120)
	args = argp.parse_args()

	device_defaults = dict(
		zone_regex=".*",
		group_regex=".*",
		data_free_min_warn=40, data_free_min_crit=30,
		mem_free_min_warn=4, mem_free_min_crit=2,

		load_1min_max_warn=5.0, load_1min_max_crit=10.0,
		load_5min_max_warn=4.0, load_5min_max_crit=6.0,
		load_15min_max_warn=3.0, load_15min_max_crit=4.0,
	)
	config_defaults = {'general': {}, args.host: device_defaults}

	config_parser = configparser.ConfigParser(config_defaults)
	config_parser.read(args.config)

	if args.host not in config_parser.sections():
		config_parser.add_section(args.host)

	for key, value in device_defaults.items():
		if not config_parser.has_option(args.host, key):
			config_parser.set(args.host, key, str(value))

	check = nagiosplugin.Check(RUCKUSVSZ(args, config_parser))
	check.add(SNMPContext('reachable'))

	if args.output_dir is None:
		check.add(PerformanceContext('num_ap'))
		check.add(PerformanceContext('num_sta'))
		check.add(PerformanceContext('num_ap_connected'))
		check.add(PerformanceContext('num_ap_configured'))

		check.add(PerformanceContext('stats_rx_pkts', uom='c'))
		check.add(PerformanceContext('stats_rx_bytes', uom='c'))
		check.add(PerformanceContext('stats_rx_multicast', uom='c'))

		check.add(PerformanceContext('stats_tx_pkts', uom='c'))
		check.add(PerformanceContext('stats_tx_bytes', uom='c'))
		check.add(PerformanceContext('stats_tx_multicast', uom='c'))
		check.add(PerformanceContext('stats_tx_fail', uom='c'))
		check.add(PerformanceContext('stats_tx_retry', uom='c'))

		check.add(nagiosplugin.ScalarContext(
			'load_1min',
			warning='0:%d' % (config_parser.getfloat(args.host, 'load_1min_max_warn')),
			critical='0:%d' % (config_parser.getfloat(args.host, 'load_1min_max_crit')))
		)
		check.add(nagiosplugin.ScalarContext(
			'load_5min',
			warning='0:%d' % (config_parser.getfloat(args.host, 'load_5min_max_warn')),
			critical='0:%d' % (config_parser.getfloat(args.host, 'load_5min_max_crit')))
		)
		check.add(nagiosplugin.ScalarContext(
			'load_15min',
			warning='0:%d' % (config_parser.getfloat(args.host, 'load_15min_max_warn')),
			critical='0:%d' % (config_parser.getfloat(args.host, 'load_15min_max_crit')))
		)

		check.add(PerformanceContext('data_size'))
		check.add(nagiosplugin.ScalarContext(
			'data_free',
			warning='%d:' % (config_parser.getint(args.host, 'data_free_min_warn')),
			critical='%d:' % (config_parser.getint(args.host, 'data_free_min_crit')))
		)
		check.add(PerformanceContext('data_free_percent'))
		check.add(PerformanceContext('mem_size'))
		check.add(nagiosplugin.ScalarContext(
			'mem_free',
			warning='%d:' % (config_parser.getint(args.host, 'mem_free_min_warn')),
			critical='%d:' % (config_parser.getint(args.host, 'mem_free_min_crit')))
		)
		check.add(PerformanceContext('mem_free_percent'))

		check.add(nagiosplugin.ScalarContext('sysuptime', warning='@%i:%i' % (0, args.uptime)))

		check.add(RUCKUSVSZSummary())
		check.main(args.verbose, timeout=args.timeout)
	else:
		if os.path.exists(args.output_dir) and os.access(args.output_dir, os.W_OK):
			print("Creating nagios configs in directory %s" % args.output_dir)
			check.main(args.verbose, timeout=args.timeout)
		else:
			print("Config directory %s does not exist or is not writable" % args.output_dir)
			sys.exit(1)


if __name__ == "__main__":
	main()
